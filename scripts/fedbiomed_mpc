#!/bin/bash
###############################################################################################################
### MP-SPDZ Command Execution Interface
###############################################################################################################

# Color configuration -----------------------------------------------------------------------------------------
RED='\033[1;31m' #red
YLW='\033[1;33m' #yellow
GRN='\033[1;32m' #green
NC='\033[0m' #reset
BOLD='\033[1m'

# Base Fed-BioMed directory ------------------------------------------------------------------------------------
[[ -n "$ZSH_NAME" ]] || myname=${BASH_SOURCE[0]}
[[ -n "$ZSH_NAME" ]] && myname=${(%):-%x}
basedir=$(cd $(dirname $myname)/.. || exit ; pwd)

# MP-SPDZ git submodule directory
mpspdz_basedir=$basedir/modules/MP-SPDZ
programs_dir=$mpspdz_basedir/Programs/Source
# ---------------------------------------------------------------------------------------------------------------


# Activate conda environment
eval "$(conda shell.bash hook)"
conda activate fedbiomed-researcher

PROTOCOLS=(shamir-party)
SCRIPTS=(server_key test_setup)

function help(){

  case $1 in

    main)

      cat <<EOF
MPC Controller

Usage

> fedbiomed_mpc [compile | exec | shamir-server-key]

compile             : To compile MPC script before execution. Please run 'compile --help' for the usage
                      and more information
exec                : To execute MPC protocol. Please run 'exec --help' for the usage and more information
shamir-server-key   : Executes Shamir S.S. protocol for server-key computation. Please run 'exec --help' for the usage
                      and more information

EOF
    ;;
    compile)
      cat <<EOF
Compiles MPC script

Usage:
> fedbiomed_mpc  compile --script [script-name] [extra arguments]

Script argument is mandatory

-s | --script : The name of the MPC script. available scripts -> [test_setup | server_key]

Pass other extra arguments for the compilation. These arguments may very based on MPC script. If the arguments are not
supported compile operation will fail. E.g '--script server_key -N 2'

EOF
    ;;

    exec)
      cat <<EOF

Executes MPC protocols

Usage
> fedbiomed_mpc exec --protocol [protocol-name] [extra-arguments]

Protocol argument is mandatory

-p | --protocol : The name of the MPC protocol. Should be one of available protocols are [shamir-party,]

Extra arguments to pass to the protocol script. The arguments should be supported by the protocol. Otherwise, script
will exit from the execution.


EOF
      ;;

    shamir-server-key)
      cat <<EOF
Executes Shamir protocol for computing server key for secure aggregation

Usage: fedbiomed_mpc shamir-server-key -pn [PART_NUMBER] -nop [TOTAL_NUM_OF_PARTIES] -aip [FILE_PATH_TO_IP_ADDRESSES]
                                          -of [OUTPUT_FILE] [-c|--compile] | [ ]
-nop|--num-of-parties   : Number of parties of the server key computation including researcher component that is
                          responsible  for aggregation

-aip|--assigned-ips     : File path where IP and PORT information of each parties are stored. This file should respect
                          the format: '<ip-address>:<port>' as each line represents different party respecting the
                          order of party numbers.

-pn|--party-number      : Party number that represents the number where the protocol is executed

-of|--output-file       : File path where the output of the calculation will be saved for party 0. The will will
                          automatically add P0-0 at the end of the file name specified. It will be created by the script
                          if it is not existing, or overwritten if it exists. For example;
                          the file specified as 'path/to/directory/Output-File' for party 1 will become
                          'path/to/directory/Output-File-P1-0'. Please make sure the directory is existing.

-if|--input-file        : File path where the input (key shares) of the parties will be saved for the parties different
                          than 0 (server). The script will automatically add P0-0 at the end of the file name specified.
                          It will be created by the script if it is not existing, or overwritten if it exists. For example;
                          the file specified as 'path/to/directory/Input-File' for party 1 will become
                          'path/to/directory/Input-File-P1-0'. Please make sure the directory is existing.

-c|--compile            : Option if the MPC script will be compiled before starting the protocol

EOF
      ;;
  esac


}

# Print error
function error(){
    echo -e "\n${RED}ERROR:${NC}\n"
    echo -e "${BOLD}$1${NC}"
    exit 1
}

# Function the retrieve absolute path of Input and Ouput files
function absolute_path(){
  path=$1
  for=$2
  directory=${path%/*}

  # Check directory is existing
  if [ ! -d "$directory" ]; then
    error "Directory is not existing for '$for': $directory/. \n\
    \rIf you are using relative path please make sure the format respect where the script is executed"
  fi

  # Retrieve absolute path
  absolute="$(cd "$(dirname -- "$path")" >/dev/null; pwd -P)/$(basename -- "$path")"
  echo "$absolute"
}


# Compile action ------------------------------------------------------------------------------------------------
function compile(){

  SCRIPT=$1
  EXTRA_ARGS=$2

  # shellcheck disable=SC2076
  if [[ ! " ${SCRIPTS[*]} " =~ " $SCRIPT " ]]; then
    error "MPC script '$SCRIPT' is not supported or not existing."
  fi

  echo -e "${GRN}Compiling '$SCRIPT'...${NC}"
  # Check MPC script is existing in MPC
  if [ ! -f "$mpspdz_basedir/Programs/Source/$SCRIPT.mpc" ]; then
    error "Unknown MPC program '$SCRIPT'. Please run --help to see available MPC scripts "
  fi

  # Retrieve long prime
  longprime=$(cat $basedir/MP-SPDZ/longprime)

  # Execute compile command
  compile_out=$(cd "$mpspdz_basedir" && python "Programs/Source/$SCRIPT.mpc" $EXTRA_ARGS --prime="$longprime" 2>&1 )
  if [ ! $? -eq 0 ]; then
    echo -e "\n${RED}ERROR:${NC}"
    echo -e "${BOLD}Above error occurred while compiling MPC program '$SCRIPT'.${NC}\n"
    echo -e "##########################################################################"
    echo -e "$compile_out"
    echo -e "##########################################################################\n"
    exit 1
  else
    echo -e "\n${GRN}Compilation is successful!${NC}"
    echo -e "##########################################################################"
    echo -e "$compile_out"
    echo -e "##########################################################################\n"
  fi
}
# ----------------------------------------------------------------------------------------------------------------


function execute_protocol(){

  PROTOCOL=$1
  EXTRA_ARGS=$2


  # shellcheck disable=SC2076
  if [[ ! " ${PROTOCOLS[*]} " =~ " $PROTOCOL " ]]; then
    error "The MPC protocol '$PROTOCOL' is not supported or not existing."
  fi

  echo -e "${GRN}Executing protocol '$PROTOCOL'...${NC}"
  echo -e "${BOLD}Press CTRL+C to stop${NC}"
  exec_out=$(cd "$mpspdz_basedir" && ./"$PROTOCOL".x $EXTRA_ARGS)

  if [ ! $? -eq 0 ]; then
    error "Error while executing protocol '$PROTOCOL'. Please check the logs above\n"
  fi
}


function execute_shamir_server_key(){

  NUMBER_OF_PARTIES=$1
  PARTY_NUMBER=$2
  ASSIGNED_IPS=$3
  OUTPUT_FILE=$4
  INPUT_FILE=$5
  COMPILE=$6

  if [ -z "$NUMBER_OF_PARTIES" ] || [ -z "$PARTY_NUMBER" ] || [ -z "$ASSIGNED_IPS" ]; then
    error "There missing arguments. Please make sure that all the arguments are provided.\n\
            \rSee 'fedbiomed_mpc shamir-server-key --help'"
  fi

  # Check output file if party number is 0 (server) -------------------------------------------------------------------
  if [ "$PARTY_NUMBER" -eq 0 ]; then
    if [ -z "$OUTPUT_FILE" ]; then
      error "Party 0 should have an output file specified with the option -of | --output-file"
    elif ! OUTPUT_FILE=$(absolute_path "$OUTPUT_FILE" "--output-file | -of option" ); then
      echo  "$OUTPUT_FILE"
      exit 1
    fi
  # Check input file if party number is different than 0 --------------------------------------------------------------
  else
    if [ -z "$INPUT_FILE" ]; then
      error "Parties different than '0 (server)' should have an input file specified with the option -if | --input-file"
    elif ! INPUT_FILE=$(absolute_path "$INPUT_FILE" "--input-file | -if option" ); then
      echo  "$INPUT_FILE"
      exit 1
    fi
  fi

  # Check file for ip addresses is existing ---------------------------------------------------------------------------
  if [ ! -f "$ASSIGNED_IPS" ]; then
    error "The file for assigned ip addresses not found.If the given path is a relative path please make the path \n\
    \rrespects where ths command/script is executed"
  else
    ASSIGNED_IPS="$(cd "$(dirname -- "$ASSIGNED_IPS")" >/dev/null; pwd -P)/$(basename -- "$ASSIGNED_IPS")"
  fi

  # Compile server key MPC file --------------------------------------------------------------------------------------
  if [ -n "$COMPILE" ]; then
    if ! "$basedir"/scripts/fedbiomed_mpc compile --script server_key -N "$NUMBER_OF_PARTIES"; then
      error "Error while executing protocol '$PROTOCOL'. Please check the logs above"
    fi
  fi


  # Generate the key-share
  if [ ! "$PARTY_NUMBER" -eq 0 ]; then
    echo -e "${GRN}Generating key share for party $PARTY_NUMBER ${NC}"
    if ! python "$basedir"/MP-SPDZ/generate_sk.py --n_len 2048 > "$INPUT_FILE"-P"$PARTY_NUMBER"-0; then
      error "Error while generating key share."
    fi
    echo -e "${BOLD}Done! Key generated in $INPUT_FILE-P$PARTY_NUMBER-0${NC}"
  fi
  echo -e "\n${YLW}Execution info:${NC}"
  echo -e "${YLW}---------------------------------------${NC}"
  echo -e "${BOLD}Party no          :${NC} $PARTY_NUMBER"
  echo -e "${BOLD}Number of parties :${NC} $NUMBER_OF_PARTIES"
  echo -e "${BOLD}Assigned IPs      :${NC} $ASSIGNED_IPS"

  # If party is 0 (server)
  if [ "$PARTY_NUMBER" -eq 0 ]; then
      echo -e "${BOLD}Output file       :${NC} $OUTPUT_FILE-P$PARTY_NUMBER-0"
  # If party is different to 0 (nodes)
  else
      echo -e "${BOLD}Input file        :${NC} $INPUT_FILE-P$PARTY_NUMBER-0 \n"
  fi

  # If party is not zero it will have Input file
  if [ ! "$PARTY_NUMBER" -eq 0 ]; then
      "$basedir"/scripts/fedbiomed_mpc exec --protocol shamir-party "$PARTY_NUMBER" \
        -ip "$ASSIGNED_IPS" \
        -IF "$INPUT_FILE" \
        server_key \
        -N "$NUMBER_OF_PARTIES"

  # If party is zero it should have Output file
  else
      "$basedir"/scripts/fedbiomed_mpc exec --protocol shamir-party "$PARTY_NUMBER" \
          -ip "$ASSIGNED_IPS" \
          -OF "$OUTPUT_FILE" \
          server_key \
          -N "$NUMBER_OF_PARTIES"
  fi


}


# Parsing arguments ---------------------------------------------------------------------------------------------
case $1 in

  compile)
    while [[ $# -gt 0 ]]; do
      case $2 in
        -s|--script)
          SCRIPT="$3"
          shift # past argument
          shift # past value
          ;;
        -h| --help)
          help compile
          exit 0
          ;;
        *)
          EXTRA_ARGS+=" $1" # save positional arg
          shift # past argument
          ;;
      esac
    done

    # Compile the protocol
    if [ -n "$SCRIPT" ]; then
          compile "$SCRIPT" "$EXTRA_ARGS"
      else
          error "Please specify MPC script name to compile. e.g '--script test_setup'"
    fi
  ;;
  exec)

    # Parse arguments for protocol execution
    while [[ $# -gt 0 ]]; do
      case $2 in
        -s|--protocol)
          PROTOCOL="$3"
          shift # past argument
          shift # past value
          ;;
        -h| --help)
          help exec
          exit 0
          ;;
        *)
          EXTRA_ARGS+=" $2" # save positional arg
          shift # past argument
          ;;
      esac
    done

    # Execute protocol
    if [ -n "$PROTOCOL" ]; then
      execute_protocol "$PROTOCOL" "$EXTRA_ARGS"
    else
      error "Please specify protocol name to compile. e.g '--protocol shamir-party' "
    fi
  ;;

  shamir-server-key)

    # Parse arguments for protocol execution
    while [[ $# -gt 0 ]]; do
      case $2 in
        -nop|--num-of-parties)
          NUMBER_OF_PARTIES="$3"
          shift # past argument
          shift # past value
          ;;
        -aip|--assigned-ips)
          ASSIGNED_IPS="$3"
          shift # past argument
          shift # past value
          ;;
        -pn|--party-number)
          PARTY_NUMBER="$3"
          shift # past argument
          shift # past value
          ;;
       -of|--ouput-file)
          OUTPUT_FILE="$3"
          shift # past argument
          shift # past value
          ;;
        -if|--input-file)
          INPUT_FILE="$3"
          shift
          shift
        ;;
        -c|--compile)
          COMPILE=1
          shift # past argument
          shift # past value
          ;;
        -h| --help)
          help shamir-server-key
          exit 0
          ;;
        *)
          if [ -z  "$2" ]; then
            break;
          else
            echo -e "\n${RED}ERROR:${NC}"
            echo -e "${BOLD}Unknown argument '$2' ${NC}\n"
            exit 1
          fi
          ;;
      esac
    done

    execute_shamir_server_key "$NUMBER_OF_PARTIES" "$PARTY_NUMBER" "$ASSIGNED_IPS" "$OUTPUT_FILE" "$INPUT_FILE" "$COMPILE"
  ;;
  -h|--help)
    help main
    exit 0
  ;;
  *)
    echo "Please specify the action you want to run between: compile, exec, shamir-server-key"
    exit 1
    ;;
esac

exit 0

