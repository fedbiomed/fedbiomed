#!/usr/bin/env bash
#
# wrapper to all vpn container(s) commands
#
#

# detect how the file is run
([[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] ||
 [[ -n $KSH_VERSION && $(cd "$(dirname -- "$0")" &&
    printf '%s' "${PWD%/}/")$(basename -- "$0") != "${.sh.file}" ]] ||
 [[ -n $BASH_VERSION ]] && (return 0 2>/dev/null)) && sourced=1 || sourced=0

[[ "${sourced}" == "1" ]] && echo "This file MUST NOT be sourced" && return

# main variables
# --------------
ALL_VPN_CONTAINERS=( vpnserver researcher node node2 gui gui2 )

# all functions
# -------------
usage() {
    #
    # print usage
    #
    extra=$1

    if [ -z "$extra" ]; then
        return_code=0
    else
        return_code=1
        echo "$extra"
    fi
    echo "\
Usage: ${0##*/} clean                          [container|configuration|image]
       ${0##*/} build                          [CONTAINER...]
       ${0##*/} configure                      [CONTAINER...]
       ${0##*/} start [-g|--gpu] [-s|--status] [CONTAINER...]
       ${0##*/} stop                           [CONTAINER...]
       ${0##*/} status                         [CONTAINER...]
       ${0##*/} {node,node2} *
       ${0##*/} researcher *

manage (local) docker container(s) with Wireguard VPN support
(cannot use build/clean/configure/start/status/stop on the same commannd line)

Optional CONTAINER name(s) may be added to the build/configure/start/stop/status
commands to manage a subset of docker container(s).
The CONTAINER list may contain: vpnserver researcher node node2 gui gui2

Be aware that (re-)building the vpnserver container when node/researcher
container(s) are running may have unpredicatble consequences. It is strongly adviced
to restart from scratch in this case (clean, build, configure, start)

clean          clean current configurations

  Optional with clean:
  container     stop and remove containers (level1)
  configuration level1 + remove containers configuration files (level2, default)
  image         level2 + remove container images (level3)

build          build container(s)

configure      generate/modify configuration files
               (wireguard keys and refresh @IP addresses)

start          start container(s)

  Optional with start:
  -g|--gpu     GPU support option (used for node container)
  -s|--status  give information on running container(s) after the start

status         give information on running container(s)

stop           stop and remove all containers

{node,node2} * start a 'fedbiomed node(2) *'       command
               inside node(2) container (eg: ${0##*/} run node list)
researcher *
               start a 'fedbiomed researcher(2) *' command
               inside researcher(2) container

  For node(2) and researcher(2) commands, all extra arguments (*) are passed
  to the fedbiomed command which is launched inside the container.
  Run 'fedbiomed command --help' for more help on valid arguments
  FYI: a jupyter notebook is already started when the researcher docker
  container is started
"
    exit $return_code
}

check_prerequisite() {
    #
    # verify that every needed commands are installed
    source $basedir/scripts/choose_docker_compose
    docker_compose

    commands=( docker "$DOCKER_COMPOSE")

    ERROR=0
    for i in "${commands[@]}"
    do
        #status=$(which $i)
        $i >/dev/null 2>&1
        status=$?
        [[ "$status" -ne 0 ]] && { echo "** ERROR: command not found: $i"; ERROR=1; }
    done
    [[ $ERROR -eq 1 ]] && { echo "** Please install needed commands before running this script." ; exit 1; }
}


internal_find_my_ip() {

    algo=$1
    # heuristically test some commands to find my "external" IP

    case $1 in
        1)
            # linux/unixes
            _IP=$(hostname -I 2>/dev/null | sed -e 's:\ .*$::')
            ;;
        2)
            # linux again using ip command
            _IP=$(ip -brief address 2>/dev/null | grep UP | head -1 | awk '{print $3}' | sed -e 's:/.*::')
            ;;
        3)
            _IP=$(ip route get 1.2.3.4 2>/dev/null | head -1 | awk '{print $7}')
            ;;
        4)
            # other cases using ifconfig command
            for i in $(seq -w 0 5); do
                _IP=$(ifconfig eth$i 2> /dev/null| grep 'inet '| awk '{print $2}')
                [ -n "$_IP" ] && break
            done
            ;;
        5)
            for i in $(seq -w 0 5); do
                _IP=$(ifconfig en$i 2> /dev/null| grep 'inet '| awk '{print $2}')
                [ -n "$_IP" ] && break
            done
            ;;
        6)
            # check also wireless
            for i in $(seq -w 0 5); do
                _IP=$(ifconfig wlan$i 2> /dev/null| grep 'inet '| awk '{print $2}')
                [ -n "$_IP" ] && break
            done
            ;;
        #
        # you may add more heuristics here
        #
        *|'')
            # always true, even if not the best choice
            _IP="127.0.0.1"
            ;;
    esac

    # verify that the result is an IPv4 adress
    _IP=$(echo $_IP | grep -E '([0-9]{1,3}[\.]){3}[0-9]{1,3}')

    echo $_IP
}

find_my_ip() {
    #
    # run bunch of heuristics to find the external (joignable) IP address
    #
    IP=""
    algo=1

    while [ -z "$IP" ]; do
        IP=$(internal_find_my_ip $algo)
        let algo+=1
    done

    case $IP in
        127.*)
            echo "** WARNING: 'vpnserver' will use the localhost IP address." >&2
            echo "            VPN may not work properly" >&2
        ;;
    esac

    echo $IP
    return
}

ONLY_CONTAINERS=()
add_container() {
    #
    # deal with container names as arguments
    #
    container=$1

    case $container in
        vpnserver|researcher|node|node2|gui|gui2)
            # verify if container already in the list
            found=0
            for c in ${ONLY_CONTAINERS[@]}
            do
                if [ $c = $container ]; then
                    found=1
                    break
                fi
            done
            if [ $found -eq 0 ]; then
                ONLY_CONTAINERS+=("$container")
            fi
            ;;
        *)
            usage "unknown argument or incompatible argument"
            ;;
    esac
}


containers_remove() {
    echo "** Stopping docker VPN container(s):" ${ONLY_CONTAINERS[@]}
    cd "$basedir/envs/vpn/docker"
    for i in ${ONLY_CONTAINERS[@]}
    do
        $DOCKER_COMPOSE rm -sf $i >/dev/null
    done
}

containers_clean() {
    echo "** Cleaning docker level: $CLEAN, container(s):" ${ALL_VPN_CONTAINERS[@]}

    cd "$basedir/envs/vpn/docker"

    #
    # level1 : stop and remove containers
    #

    containers_remove

    for i in base basenode
    do
        $DOCKER_COMPOSE rm -sf $i >/dev/null
    done

    #
    # level2 : remove configuration files
    #
    if [[ $CLEAN -lt 2 ]] ; then
        return
    fi
    echo "** Cleaning docker containers configuration files, container(s):" ${ALL_VPN_CONTAINERS[@]}

    for i in ${ALL_VPN_CONTAINERS[@]}
    do
        [[ "$i" = "gui" ]] || [[ "$i" = "gui2" ]] && { continue ; } # gui containers do not use wireguard
        /bin/rm -rf ./$i/run_mounts/config/wireguard 2> /dev/null
        /bin/rm -rf ./$i/run_mounts/config/config.env 2> /dev/null
    done

    # specific to vpnserver
    /bin/rm -fr ./vpnserver/run_mounts/config/config_peers 2> /dev/null
    /bin/rm -fr ./vpnserver/run_mounts/config/ip_assign    2> /dev/null

    # specific to node
    /bin/rm -rf ./node/run_mounts/data/*            2> /dev/null
    /bin/rm -rf ./node/run_mounts/envs/!\(common\)  2> /dev/null
    /bin/rm -rf ./node/run_mounts/envs/common/*     2> /dev/null
    /bin/rm -rf ./node/run_mounts/etc/*             2> /dev/null
    /bin/rm -rf ./node/run_mounts/var/*             2> /dev/null

    /bin/rm -rf ./node2/run_mounts/data/*           2> /dev/null
    /bin/rm -rf ./node2/run_mounts/envs/!\(common\) 2> /dev/null
    /bin/rm -rf ./node2/run_mounts/envs/common/*    2> /dev/null
    /bin/rm -rf ./node2/run_mounts/etc/*            2> /dev/null
    /bin/rm -rf ./node2/run_mounts/var/*            2> /dev/null

    # specific to researcher
    /bin/rm -rf ./researcher/run_mounts/data/*      2> /dev/null
    /bin/rm -rf ./researcher/run_mounts/etc/*       2> /dev/null
    /bin/rm -rf ./researcher/run_mounts/samples/*   2> /dev/null
    /bin/rm -rf ./researcher/run_mounts/runs/*      2> /dev/null
    /bin/rm -rf ./researcher/run_mounts/var/*       2> /dev/null

    #
    # level3 : remove container images
    #
    if [[ $CLEAN -lt 3 ]] ; then
        return
    fi
    echo "** Cleaning docker containers images, container(s):" ${ALL_VPN_CONTAINERS[@]}

    for i in ${ALL_VPN_CONTAINERS[@]} base basenode
    do
        [[ "$i" = "node2" ]] || [[ "$i" = "gui2" ]] && continue # same as node/gui images
        docker image rm -f fedbiomed/vpn-$i 2>/dev/null
    done

    docker image prune -f

}

containers_status() {
    echo "** Checking docker VPN images & VPN access:" ${ONLY_CONTAINERS[@]}
    cd "$basedir/envs/vpn/docker"

    RUNNING_CONTAINERS=()
    for i in ${ONLY_CONTAINERS[@]}
    do
        status=$(docker ps | grep fedbiomed-vpn-$i)
        if [ -z "$status" ]; then
            echo "- container $i is NOT running"
        else
            echo "- container $i is running"
            RUNNING_CONTAINERS+=("$i")
        fi
    done

    # ping inside the wg vpn
    for i in ${RUNNING_CONTAINERS[@]}
    do
        [[ "$i" = "gui" ]] || [[ "$i" = "gui2" ]] && { continue ; } # gui containers do not use wireguard
        echo -n "- pinging VPN server from container $i -> "
        ping=$($DOCKER_COMPOSE exec ${i} ping -n -c 3 -W 1 10.220.0.1 2>/dev/null | cat -v)

        status=$(echo $ping|grep seq=)
        if [ -z "$status" ]; then
            echo "BROKEN"
            ERROR=1
        else
            echo "OK"
        fi
    done

    if [ $ERROR -eq 1 ]; then
        echo "** ERROR: cannot ping using VPN addresses inside some docker container(s)"
        echo "          You must check what is going on."
    fi
}

containers_build() {
    echo "** Building docker VPN container(s):" ${ONLY_CONTAINERS[@]}
    cd "$basedir/envs/vpn/docker"

    BUILD_BASE=0
    BUILD_NODEBASE=0
    for i in ${ONLY_CONTAINERS[@]}
    do
        case $i in
            vpnserver|researcher) BUILD_BASE=1;;
            node|node2)           BUILD_NODEBASE=1;;
        esac
    done

    if [ $BUILD_BASE -eq 1 ]; then
        echo "- building 'base' container"
        CONTAINER_UID=${CONTAINER_UID:-$(id -u)} CONTAINER_GID=${CONTAINER_GID:-$(id -g)} \
            CONTAINER_USER=${CONTAINER_USER:-$(id -un | sed 's/[^[:alnum:]]/_/g')} \
            CONTAINER_GROUP=${CONTAINER_GROUP:-$(id -gn | sed 's/[^[:alnum:]]/_/g')} \
            $DOCKER_COMPOSE build base
    fi
    if [ $BUILD_NODEBASE -eq 1 ]; then
        echo "- building 'basenode' container"
        CONTAINER_UID=${CONTAINER_UID:-$(id -u)} CONTAINER_GID=${CONTAINER_GID:-$(id -g)} \
            CONTAINER_USER=${CONTAINER_USER:-$(id -un | sed 's/[^[:alnum:]]/_/g')} \
            CONTAINER_GROUP=${CONTAINER_GROUP:-$(id -gn | sed 's/[^[:alnum:]]/_/g')} \
            $DOCKER_COMPOSE build basenode
    fi

    for i in ${ONLY_CONTAINERS[@]}
    do
        echo "- stopping '$i' container"
        $DOCKER_COMPOSE rm -sf $i >/dev/null
        echo "- building '$i' container"
        CONTAINER_UID=${CONTAINER_UID:-$(id -u)} CONTAINER_GID=${CONTAINER_GID:-$(id -g)} \
            CONTAINER_USER=${CONTAINER_USER:-$(id -un | sed 's/[^[:alnum:]]/_/g')} \
            CONTAINER_GROUP=${CONTAINER_GROUP:-$(id -gn | sed 's/[^[:alnum:]]/_/g')} \
            $DOCKER_COMPOSE build $i
    done
}

single_container_configure() {
    container=$1
    category=$2

    # patch to fix name mismatch between logical container name and localisation on disk
    # must be fixed then implementing multiple researcher/node support
    case $category in
        management) destination=$container;;
        *)          destination=$category;;
    esac

    IP=$(find_my_ip)

    /bin/rm -fr ./vpnserver/run_mounts/config/config_peers/${category}/${container}
    $DOCKER_COMPOSE exec vpnserver bash -c -i "python ./vpn/bin/configure_peer.py genconf ${category} ${container}"
    sleep 1

    /bin/rm -fr ./${container}/run_mounts/config/wireguard    2> /dev/null
    /bin/cp ./vpnserver/run_mounts/config/config_peers/${category}/${container}/config.env ./${destination}/run_mounts/config/config.env
}


containers_configure() {
    echo "** Generating VPN/Wireguards keys:" ${ONLY_CONTAINERS[@]}
    cd "$basedir/envs/vpn/docker"

    containers_remove

    # replace IP in VPN main config file
    CONFIG="$basedir/envs/vpn/docker/vpnserver/run_mounts/config/config.env"
    IP=$(find_my_ip)

    #git checkout $CONFIG
    cp -f $CONFIG.sample $CONFIG
    sed -i-XXX "s:replace_with.myserver.mydomain:$IP:" $CONFIG && /bin/rm ${CONFIG}-XXX

    # start vpn server to generate config files
    CONTAINER_UID=${CONTAINER_UID:-$(id -u)} CONTAINER_GID=${CONTAINER_GID:-$(id -g)} \
        CONTAINER_USER=${CONTAINER_USER:-$(id -un | sed 's/[^[:alnum:]]/_/g')} \
        CONTAINER_GROUP=${CONTAINER_GROUP:-$(id -gn | sed 's/[^[:alnum:]]/_/g')} \
        $DOCKER_COMPOSE up -d vpnserver
    sleep 1 # give time to container to initialize

    for i in ${ONLY_CONTAINERS[@]}
    do
        case $i in
            researcher) single_container_configure researcher1 researcher ;;
            node)       single_container_configure NODETAG node ;;
            node2)      single_container_configure NODE2TAG node ;;
            *)  ;;
        esac
    done
}

containers_start() {
    echo "** Starting docker VPN container(s):" ${ONLY_CONTAINERS[@]}

    cd "$basedir/envs/vpn/docker"

    # verify IP in config file
    CONFIG="$basedir/envs/vpn/docker/vpnserver/run_mounts/config/config.env"
    IP=$(find_my_ip)

    ip_in_file=$(grep "^export VPN_SERVER_PUBLIC_ADDR=$IP$" $CONFIG)
    if [ -z "$ip_in_file" ]; then
        echo "** WARNING: external IP address has changed since last configuration"
        echo "            You may need to run:  ${0##*/} configure"
        exit 1
    fi


    # Use CONTAINER_UID variable again when starting container(s) because
    # if image is not build `docker compose up ` will automatically build it

    # start vpnserver first
    CONTAINER_UID=${CONTAINER_UID:-$(id -u)} CONTAINER_GID=${CONTAINER_GID:-$(id -g)} \
        CONTAINER_USER=${CONTAINER_USER:-$(id -un | sed 's/[^[:alnum:]]/_/g')} \
        CONTAINER_GROUP=${CONTAINER_GROUP:-$(id -gn | sed 's/[^[:alnum:]]/_/g')} \
        $DOCKER_COMPOSE up -d vpnserver
    sleep 1 # give time to container to initialize

    # start other container(s)
    for i in ${ONLY_CONTAINERS[@]}
    do
        [[ $i = "vpnserver" ]] && { continue; }
        case $i in
            node|node2)
                if [ $GPU -eq 1 ]; then
                    CONTAINER=$i-gpu
                else
                    CONTAINER=$i
                fi
                ;;
            *  ) CONTAINER=$i ;;
        esac

        echo "- starting $i container"
        $DOCKER_COMPOSE rm -sf $CONTAINER >/dev/null
        CONTAINER_UID=${CONTAINER_UID:-$(id -u)} CONTAINER_GID=${CONTAINER_GID:-$(id -g)} \
            CONTAINER_USER=${CONTAINER_USER:-$(id -un | sed 's/[^[:alnum:]]/_/g')} \
            CONTAINER_GROUP=${CONTAINER_GROUP:-$(id -gn | sed 's/[^[:alnum:]]/_/g')} \
            $DOCKER_COMPOSE up -d $CONTAINER
        sleep 1 # give time to container to initialize

        case $i in
            researcher)
                pubkey=$($DOCKER_COMPOSE exec researcher wg show wg0 public-key | tr -d '\r')
                # Remove key to avoid protocol error if keys are same
                $DOCKER_COMPOSE exec vpnserver python ./vpn/bin/configure_peer.py remove researcher researcher1
                $DOCKER_COMPOSE exec vpnserver python ./vpn/bin/configure_peer.py add researcher researcher1 $pubkey
                ;;
            node)
                pubkey=$($DOCKER_COMPOSE exec node wg show wg0 public-key | tr -d '\r')
                # Remove key to avoid protocol error if keys are same
                $DOCKER_COMPOSE exec vpnserver python ./vpn/bin/configure_peer.py remove node NODETAG
                $DOCKER_COMPOSE exec vpnserver python ./vpn/bin/configure_peer.py add node NODETAG $pubkey
                ;;
            node2)
                pubkey=$($DOCKER_COMPOSE exec node2 wg show wg0 public-key | tr -d '\r')
                # Remove key to avoid protocol error if keys are same
                $DOCKER_COMPOSE exec vpnserver python ./vpn/bin/configure_peer.py remove node NODE2TAG
                $DOCKER_COMPOSE exec vpnserver python ./vpn/bin/configure_peer.py add node NODE2TAG $pubkey
                ;;
            *)
                ;;
        esac
    done

    sleep 1 # sometimes the container volumes are not synchronized immediately
}

run() {
    container=$1

    echo "** Run command inside $container VPN container"

    [[ -z "$RUN_ARGS" ]] && { usage "fedbiomed run $container needs extra arguments";  }
    cd "$basedir/envs/vpn/docker"

    CMD="export PYTHONPATH=/fedbiomed && fedbiomed $container ${RUN_ARGS}"

    $DOCKER_COMPOSE exec -u ${CONTAINER_UID:-$(id -u)} $container bash -c "$CMD"

}

# main
# ----

# detect top directory
basedir=$(cd $(dirname $0)/.. || exit ; pwd)
cd "$basedir/envs/vpn/docker" 2> /dev/null || {
    echo "** error: cannot go to the source directory. Verify the git status"
    echo "($basedir/envs/vpn/docker)"
    exit 1
}

#
CLEAN=0
BUILD=0
CONFIGURE=0
START=0
STOP=0
GPU=0
RUN_NODE=0
RUN_RESEARCHER=0
RUN_ARGS=""

#
check_prerequisite

# must provide at least an option
if [ $# -eq 0 ]; then
    usage "must provide an option"
fi

# arguments decoding
while (($# > 0)); do
    case $1 in

        build)
            BUILD=1
            shift
            while (($# > 0)); do
                case $1 in
                    -h|--help|help) usage   ;;
                    vpnserver|researcher|node|node2|gui|gui2) add_container $1;;
                    *) usage "unknown or incompatible arguments" ;;
                esac
                shift
            done
            ;;

        clean)
            CLEAN=2
            shift
            while (($# > 0)); do
                case $1 in
                    container) CLEAN=1 ;;
                    configuration) CLEAN=2 ;;
                    image) CLEAN=3 ;;
                    -h|--help|help) usage ;;
                    *) usage "unknown or incompatible arguments" ;;
                esac
                shift
            done
            ;;

        config*)
            CONFIGURE=1
            shift
            while (($# > 0)); do
                case $1 in
                    researcher|node|node2) add_container $1;;
                    vpnserver|gui|gui2)
                        echo "it is not necessary to configure $i - ignoring" ;;
                    -h|--help|help) usage ;;
                    *) usage "unknown or incompatible arguments" ;;
                esac
                shift
            done
            ;;


        start)
            START=1
            shift
            while (($# > 0)); do
                case $1 in
                    vpnserver|researcher|node|node2|gui|gui2) add_container $1;;
                    -h|--help|help) usage ;;
                    -g|--gpu)       GPU=1 ;;
                    -s|--status)    STATUS=1 ;;
                    *) usage "unknown or incompatible arguments" ;;
                esac
                shift
            done
            ;;

        stop)
            STOP=1
            shift
            while (($# > 0)); do
                case $1 in
                    vpnserver|researcher|node|node2|gui|gui2) add_container $1;;
                    -h|--help|help) usage ;;
                    *) usage "unknown or incompatible arguments" ;;
                esac
                shift
            done
            ;;

        status)
            STATUS=1
            shift
            while (($# > 0)); do
                case $1 in
                    vpnserver|researcher|node|node2|gui|gui2) add_container $1;;
                    -h|--help|help) usage ;;
                    *) usage "unknown or incompatible arguments" ;;
                esac
                shift
            done
            ;;

        node)
            shift
            RUN_NODE=1
            while (($# > 0)); do
                case $1 in
                    -h|--help|help) usage ;;
                    *)              RUN_ARGS="${RUN_ARGS} $1" ;;
                esac
                shift
            done
            ;;

        node2)
            shift
            RUN_NODE2=1
            while (($# > 0)); do
                case $1 in
                    -h|--help|help) usage ;;
                    *)              RUN_ARGS="${RUN_ARGS} $1" ;;
                esac
                shift
            done
            ;;

        researcher)
            shift
            RUN_RESEARCHER=1
            while (($# > 0)); do
                case $1 in
                    -h|--help|help) usage ;;
                    *)              RUN_ARGS="${RUN_ARGS} $1" ;;
                esac
                shift
            done
            ;;

        -h|--help|help) usage ;;

        *) usage "unknown or incompatible option: $1";;
    esac
    shift
done

# if no container on command line, use all of them
if [ ${#ONLY_CONTAINERS[@]} -eq 0 ]; then
    ONLY_CONTAINERS=(${ALL_VPN_CONTAINERS[@]})
fi

# start doing something useful
# -----------------------------
[[ $CLEAN -gt 0 ]]          && { containers_clean; }
[[ $BUILD -eq 1 ]]          && { containers_build; }
[[ $CONFIGURE -eq 1 ]]      && { containers_configure; }
[[ $START -eq 1 ]]          && { containers_start; }
[[ $STOP -eq 1 ]]           && { containers_remove; }
[[ $RUN_NODE -eq 1 ]]       && { run node; }
[[ $RUN_NODE2 -eq 1 ]]       && { run node2; }
[[ $RUN_RESEARCHER -eq 1 ]] && { run researcher; }

# at the end because of the --status option
[[ $STATUS -eq 1 ]]         && { containers_status; }

exit 0
