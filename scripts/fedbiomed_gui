#!/bin/bash

basedir=$(cd $(dirname $0)/.. || exit ; pwd)
cd $basedir || exit


function usage() {
        cat <<EOF

  Usage:
  febiomed_run gui [data-folder DATAFOLDER | config CONFIG_NAME | cert-file CERTIFICATE_NAME | key-file PRIVATE_KEY_NAME | host IP_ADDRESS | port PORT | --recreate]
                         (start)

  Options:
  - data-folder | --data-folder | -df  [<path>]       :   Folder that data files are stored, by default script will
                                                          look for \`data\` in Fed-BioMed directory
  - config      | --config      | -c   [<config>]     :   Name of the node's config file. GUI will be configured
                                                          based on given config file. By default, \`config_node.ini\`.
                                                          If config file doesn't exist script will raise an error.
  - cert-file   | --cert-file   | -ct  [<certificate>]:   Name of the certificate to use in order to enable HTTPS.
                                                          If cert file doesn't exist script will raise an error.
  - key-file    | --key-file    | -k   [<key>]        :   Name of the private key for the SSL certificate.
                                                          If the key file doesn't exist, the script will raise an error.
  - port        | --port        | -p   [<port>]       :   HTTP port that GUI will be served. Default is \`8484\`
  - host        | --host        | -h   [<host>]       :   HTTP host that GUI will be served, Default is \`localhost\`
  - recreate    | --recreate    | -rc                 :   Flag that indicates, UI will be rebuilt while launching
                                                          the GUI. Use this option if you have updated UI scripts.
  - debug       | --debug       | -dbg                :   Flag that will start Flask (Server) in debug mode.

  Commands:
  - start: Launches the Node GUI with given options.
EOF
}

# Colors
RED='\033[0;31m' #red
YLW='\033[1;33m' #yellow
NC='\033[0m' #no color


GUI_HOST='localhost'
GUI_PORT='8484'
GUI_DEBUG=False


# Print error and exists
function error(){
  echo -e "${RED}ERROR${NC}"
  echo -e "$1"
  exit 1
}

function start_gui() {
    # Check config file status
    if [ -n "$CONFIG_FILE" ]; then
      echo -e "${YLW}INFO${NC}: Using $CONFIG_FILE file as GUI node config"
    else
      CONFIG_FILE="config_node.ini"
      echo -e "${YLW}INFO${NC}: Config file has not been provided, default config 'config_node.ini' will be used for GUI"
    fi
    if [ -z "${INSTALL_ONLY}" -a ! -f "etc/${CONFIG_FILE}" ] ; then
        error "'etc/${CONFIG_FILE}' does not exist in Fed-BioMed root directory"
    fi

    # Configure data path
    if [ ! -n "$DATA_PATH" ]; then
      DATA_PATH="data"
      echo -e "${YLW}INFO${NC}: Data path has not been provided. Trying to use \${FEDBIOMED_DIR}/data dir"
      if [ -z "${INSTALL_ONLY}" -a ! -d "$basedir/$DATA_PATH" ]; then
        error "'data' folder does not exist in  directory"
      fi
    else
        # If the path is absolute
        if [[ $DATA_PATH == /* ]]; then
            if [[ -z "${INSTALL_ONLY}"  && ! -d "$DATA_PATH" ]]; then
              error "Folder '$DATA_PATH' does not exist. Can not continue.\n"
            fi
        # If the path is relative
        else
            if [ -z "${INSTALL_ONLY}"  -a ! -d "$basedir/$DATA_PATH" ]; then
              error "folder '$basedir/${DATA_PATH}' does not exist. Can not continue.\n"
            else
              DATA_PATH="$(cd "$basedir/$DATA_PATH" && pwd)"
            fi
            echo "$DATA_PATH"
        fi
    fi

    # Activate Fed-BioMed GUI environment
    source ${basedir}/scripts/fedbiomed_environment gui

    # Install node modules
    echo -e "${YLW}INFO${NC}: Controlling react bundle and modules"
    cd ./gui/ui

    # Create bundle if there is no build directory/node_modules or recreate is active
    if  [ ! -d "$basedir/gui/ui/node_modules" ] || [ ! -d "$basedir/var/gui-build" ] || [ -n "$RECREATE" ];then
        echo -e "${YLW}INFO${NC}: Installing node modules"
        yarn install || exit

        echo -e "${YLW}INFO${NC}: Building Fed-BioMed GUI"
        yarn run build || exit

        if [ -d "$basedir/var/gui-build" ];then
          rm -Rf "$basedir/var/gui-build";
        fi

        [ -e $basedir/var ] || mkdir $basedir/var # may not exist after cleaning
        mv "$basedir/gui/ui/build/" "$basedir/var/gui-build"
    fi


    if [ -z "$INSTALL_ONLY" ] ; then
        # Change command according to development and production mode
        if [ "$GUI_PRODUCTION" == "True" ] || [ "$GUI_PRODUCTION" == 1 ]; then
          # Forces single worker
          WORKERS=1
          echo "$KEY $CERTIFICATE"
          if [ -n "$KEY" -a -n "$CERTIFICATE" ]; then
            key_command="--keyfile $KEY"
            cert_command="--certfile $CERTIFICATE"
          fi
          command="gunicorn --workers $WORKERS $key_command $cert_command -b $GUI_HOST:$GUI_PORT --access-logfile - wsgi:app"
        else
          command="FLASK_ENV=development FLASK_APP=wsgi.py flask run --host $GUI_HOST --port $GUI_PORT $key_command $cert_commnad "
        fi

        cd ../server
        # Starting flask
        echo -e "${YLW}INFO:${NC} Starting Flask Server and API services...."

        eval "FEDBIOMED_DIR=$basedir" \
          "NODE_CONFIG_FILE=$CONFIG_FILE" \
          "BUILD_DIR=$basedir/var/gui-build" \
          "DATA_PATH=$DATA_PATH" \
          "DEBUG=$GUI_DEBUG" \
          "CERT_FILE=$CERTIFICATE_NAME" \
          "KEY_FILE=$PRIVATE_KEY_NAME" \
          "$command"
    fi
}

while [[ $# -gt 0 ]]; do
  case $1 in
    config|--config|-c)
          if [ $# -lt 3 ] ; then
              echo -e "${RED}ERROR${NC}: missing config file name"
              exit 1
          fi
          CONFIG_FILE=$2
          shift
          shift
    ;;
    data-folder|--data-folder|-df)
        if [ $# -lt 3 ] ; then
            echo -e "${RED}ERROR${NC}: missing data folder path"
            exit 1
        fi
        DATA_PATH="$2"
        shift
        shift
        ;;
    cert-file|--cert-file|-ct)
        if [ $# -lt 2 ] ; then
            error "Missing certificate path"
            exit 1
        fi
        CERTIFICATE="$2"
        if [ -z "${INSTALL_ONLY}" -a ! -f "${CERTIFICATE}" ] ; then
          error "Certificate file '${CERTIFICATE}' does not exist in Fed-BioMed root directory"
        fi
        echo -e "${YLW}INFO${NC}: Using $CERTIFICATE' as GUI node SSL certificate"
        shift
        shift
        ;;
    key-file|--key-file|-k)
        if [ $# -lt 2 ] ; then
            error "Missing primary key path"
        fi
        KEY="$2"
        if [ -z "${INSTALL_ONLY}" -a ! -f "${KEY}" ] ; then
          error "Private key file '${KEY}' does not exist in Fed-BioMed root directory"
        fi
        echo -e "${YLW}INFO${NC}: Using '$KEY' as GUI node private key for SSL certificate"
        shift
        shift
        ;;
    port|--port |-p)
        GUI_PORT="$2"
        shift
        shift
        ;;
    host|--host)
        GUI_HOST="$2"
        shift
        shift
        ;;
    recreate | --recreate | -rc )
        RECREATE=True
        shift
        ;;
    install-only | --install-only | -io )
        INSTALL_ONLY=True
        shift
        ;;
    debug|--debug|-dbg)
        GUI_DEBUG=True
        shift
        ;;
    production|--production)
        export GUI_PRODUCTION=1
        shift
        ;;
    help|-h|--help)
        shift
        usage gui
        ;;
    * )
        break;
  esac
done

case $1 in
    start)
      if [ -n "$2" ]; then
        error "The last command should be 'start' not $2"
      fi
      start_gui
      ;;
    *)
      error "Node GUI command should be used with start. Please make sure that your command is correct"
      ;;
esac

