#!/bin/bash
#
# configure a development environment for each component (network, node, researcher)
#

#
# find the directory containing all sources
#
# this works then source this file !!!!
#
# detect how the file is run
([[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] ||
 [[ -n $KSH_VERSION && $(cd "$(dirname -- "$0")" &&
    printf '%s' "${PWD%/}/")$(basename -- "$0") != "${.sh.file}" ]] ||
 [[ -n $BASH_VERSION ]] && (return 0 2>/dev/null)) && sourced=1 || sourced=0

[[ "${sourced}" == "0" ]] &&
    echo "This file MUST be sourced from a BASH shell (and not executed) to benefit from the environment" && exit -1

[[ "$KSH_VERSION" ]] && echo "This script only works from a BASH or ZSH shell - You may still use the fedbiomed_run command" && return

#Activate conda with any of the next commands
#source ~/miniconda3/bin/activate
#source ~/.bashrcx
eval "$(conda shell.bash hook)"

#
# helpers
#
environment_printvar() {
    if [ -z "$2" ]
    then
        echo "$1: None"
    else
        echo "$1: $2"
    fi
}

environment_info() {
    environment_printvar "Conda   env   " "${CONDA_DEFAULT_ENV}"
    environment_printvar "Python  env   " "${PYTHONPATH}"
    environment_printvar "FEDBIOMED_DIR " "${FEDBIOMED_DIR}"
    environment_printvar "MQTT   host   " "${MQTT_BROKER}"
    environment_printvar "MQTT   port   " "${MQTT_BROKER_PORT}"
    environment_printvar "UPLOADS url   " "${UPLOADS_URL}"
}

development_env() {
    export FEDBIOMED_DIR=$basedir
    export IP_ADDRESS=${1:-localhost}
    # use the (if provided) UPLOADS_URL var env
    [[ -z "$UPLOADS_URL" ]] && { export UPLOADS_URL="http://${IP_ADDRESS}:8844/upload/" ; }
    [[ -z "$MQTT_BROKER" ]] && { export MQTT_BROKER="localhost" ; }
    [[ -z "$MQTT_BROKER_PORT" ]] && { export MQTT_BROKER_PORT=1883 ;}
}

environment_reset() {
    verbose=$1
    [[ ! -z "$verbose" ]] && echo "** Deactivating all environment"
    conda deactivate
    unset PYTHONPATH
    unset MQTT_BROKER
    unset MQTT_BROKER_PORT
    unset IP_ADDRESS
    unset UPLOADS_URL
    [[ ! -z "$verbose" ]] && environment_info
}

activate_network() {
    verbose=$1
    [[ ! -z "$verbose" ]] && echo "** Activating fedbiomed-network environment"
    conda activate fedbiomed-network
    unset PYTHONPATH
    [[ ! -z "$verbose" ]] && environment_info
}

activate_node() {
    verbose=$1
    [[ ! -z "$verbose" ]] && echo "** Activating fedbiomed-node environment"
    conda activate fedbiomed-node
    export PYTHONPATH=$basedir
    [[ ! -z "$verbose" ]] && environment_info
}

activate_researcher() {
    verbose=$1
    [[ ! -z "$verbose" ]] && echo "** Activating fedbiomed-researcher environment"
    conda activate fedbiomed-researcher
    export PYTHONPATH=$basedir
    [[ ! -z "$verbose" ]] && environment_info
}

activate_gui() {
    verbose=$1
    [[ ! -z "$verbose" ]] && echo "** Activating fedbiomed-gui environment"
    conda activate fedbiomed-gui
    #unset PYTHONPATH
    export PYTHONPATH=$basedir
    [[ ! -z "$verbose" ]] && environment_info
}

#
# main
#

# detect my own name (then sourced)
[[ -n "$ZSH_NAME" ]] || myname=${BASH_SOURCE[0]}
[[ -n "$ZSH_NAME" ]] && myname=${(%):-%x}
basedir=$(cd $(dirname $myname)/.. || exit ; pwd)

# initialize development environment for....
case $1 in

    clean)
        conda deactivate
        environment_reset
        activate_network
        echo "** Cleaning all caches / temporary files"
        # docker containers
        (cd ${basedir}/envs/development/docker/ && docker-compose rm -sf &&  echo " * Docker cleaning" )

        # network cleaner
        echo " * Network cleaning"
        restful_mount='envs/development/docker/restful/run_mounts'
        net_temp_paths="${restful_mount}/app/db.sqlite3 ${restful_mount}/app/data/static"
        net_temp_paths+=" ${restful_mount}/app/data/media/uploads ${restful_mount}/app/data/media/persistent/*"
        for p in $net_temp_paths ; do
            if [ -e "${basedir}/$p" ] ; then
                echo "[INFO] Removing directory ${basedir}/$p"
                rm -rf ${basedir}/$p
            fi
        done

        # node/researcher cleaners
        environment_reset
        activate_node
        if [ -f ${basedir}/scripts/clean_node.py ]
        then
            echo " * Node cleaning"
            conda deactivate
            environment_reset
            activate_node
            python ${basedir}/scripts/clean_node.py
        fi

        # gui cleaning
        echo " * Node GUI cleaning"
        gui_temp_paths='var/gui_build gui/ui/node_modules gui/ui/package-lock.json'
        for p in $gui_temp_paths ; do
            if [ -e "${basedir}/$p" ] ; then
                echo "[INFO] Removing directory ${basedir}/$p"
                rm -rf ${basedir}/$p
            fi
        done

        environment_reset
        activate_researcher
        if [ -f ${basedir}/scripts/clean_researcher.py ]
        then
            echo " * Researcher cleaning"
            conda deactivate
            environment_reset
            activate_researcher
            python ${basedir}/scripts/clean_researcher.py
        fi

        conda deactivate
        environment_reset
        ;;

    reset)
        conda deactivate
        environment_reset verbose
        ;;

    network)
        conda deactivate
        environment_reset
        activate_network verbose
        ;;

    node|n)
        conda deactivate
        [[ -z "$FEDBIOMED_NO_RESET" ]] && { environment_reset ; }
        development_env $2
        activate_node verbose
        ;;

    researcher|r)
        conda deactivate
        [[ -z "$FEDBIOMED_NO_RESET" ]] && { environment_reset ; }
        development_env $2
        activate_researcher verbose
        ;;

    gui)
        conda deactivate
        [[ -z "$FEDBIOMED_NO_RESET" ]] && { environment_reset ; }
        development_env $2
        activate_gui verbose
        ;;

    *)
        cat <<EOF
Usage: fedbiomed_environment network|node [IP_ADDRESS] |researcher [IP_ADDRESS] |gui |reset|clean

Please specify:
- network, node [IP_ADDRESS], researcher [IP_ADDRESS], gui : to activate an environment
        with optional IP_ADDRESS (eg 10.1.2.3 or host.foo) for joining network
        components (default: localhost)
- reset                     : to leave the current environment
- clean                     : to clean all caches, tempo files,...
EOF
        ;;
esac
