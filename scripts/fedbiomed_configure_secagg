#!/bin/bash
###############################################################################################################
### MP-SPDZ Configuration
###############################################################################################################

# Color configuration -----------------------------------------------------------------------------------------
RED='\033[1;31m' #red
YLW='\033[1;33m' #yellow
GRN='\033[1;32m' #green
NC='\033[0m' #no color
BOLD='\033[1m'

# Base Fed-BioMed directory -------------------------------------------------------------------------------------
[[ -n "$ZSH_NAME" ]] || myname=${BASH_SOURCE[0]}
[[ -n "$ZSH_NAME" ]] && myname=${(%):-%x}
basedir=$(cd $(dirname $myname)/.. || exit ; pwd)

# MP-SPDZ git submodule directory
mpspdz_basedir=$basedir/modules/MP-SPDZ
# ---------------------------------------------------------------------------------------------------------------

fedbiomed_envs=(node researcher)
fedbiomed_env=$1

if [ -z "$fedbiomed_env" ]; then
  echo -e "${RED}ERROR:${NC}"
  echo -e "${BOLD}Please specify Fed-BioMed component node|researcher. '> fedbiomed_configure_secagg (node|researcher)'"
  exit 1
fi

# shellcheck disable=SC2076
if [[ ! " ${fedbiomed_envs[*]} " =~ " $fedbiomed_env " ]]; then
  echo -e "${RED}ERROR:${NC}"
  echo -e "${BOLD}Fed-BioMed component should be 'node' or 'researcher' but got '$fedbiomed_env'"
  exit 1
fi

# Activate conda environment ------------------------------------------------------------------------------------
if ! eval "$(conda shell.bash hook)"; then
  echo -e "${RED}ERROR:${NC}"
  echo -e "${BOLD} Please make sure that 'conda' is installed and compatible with the current shell you are using"
  exit 1
fi

if ! conda activate fedbiomed-"$fedbiomed_env"; then
  echo -e "${RED}ERROR:${NC}"
  echo -e "${BOLD} Please make sure that conda environment 'fedbiomed-$fedbiomed_env' is existing."
  exit 1
fi
# ---------------------------------------------------------------------------------------------------------------

echo -e "\n${GRN}Starting MP-SPDZ configuration...${NC}"
# Clone initialize github submodule if it is not existing
echo -e "${BOLD}Updating MP-SPDZ submodule${NC}\n"
git submodule update --init modules/MP-SPDZ

#################################
# Linux Configuration
#################################
configure_linux() {

  cpu_info='cat /proc/cpuinfo'

  # Detect architecture
  if test "$cpu_info"; then
    echo -e "${YLW}--------------------------------ARCHITECTURE INFO-------------------------------------------${NC}"
    if $cpu_info | grep -q avx2; then
      echo -e "${BOLD}CPU uses Advanced Vector Extension 2 'avx2'${NC}\n"
      cpu_arch=avx2
    elif test "$(uname -m)" = 'x86_64' ; then
      cpu_arch=amd64
      echo -e "${BOLD}CPU uses Advanced Micro Devices 64 'amd64'${NC}\n"
    else
      echo -e "${RED}ERROR${NC}: Unknown CPU architecture"
      exit 1
    fi

    # Link binaries to ${FEDBIOMED_DIR}/MP-SPDZ ---------------------------------------------------------------------
    echo -e "\n${YLW}Copying binary distributions... ${NC}"
    if ! ln -nsf "$basedir"/MP-SPDZ/$(uname)-$cpu_arch/*.x "$mpspdz_basedir"/; then
      echo -e "\n${RED}ERROR${NC}: Can not link binary files!\n"
      exit 1
    fi
    # -----------------------------------------------------------------------------------------------------------
  else
    echo -e "${RED}ERROR${NC}: Can not get CPU info 'cat /proc/cpuinfo' failed!"
    exit 1
  fi

}


#################################
# Darwin Configuration
#################################
configure_darwin() {

  if ! type brew; then
    echo -e "${RED}ERROR:${NC}"
    echo -e "${BOLD} Please install 'Homebrew' to continue configuration"
    exit 1
  fi

  echo -e "\n${YLW}--------------------------------Building from source distribution---------------------------${NC}"

  echo -e "${GRN}\nRunning make clean ...${NC}"
  if ! make -C "$mpspdz_basedir" clean; then
    echo -e "${RED}ERROR:${NC}"
    echo -e "${BOLD}Can not build MP-SPDZ. Please check the logs above"
    exit 1
  fi
  echo -e "${BOLD}Done cleaning! .${NC}"

  echo "MOD = -DGFP_MOD_SZ=33" >> "$mpspdz_basedir"/CONFIG.mine

  echo -e "${GRN}\nInstalling MP-SPDZ from source dist ${NC}"
  if ! make -j 8 -C "$mpspdz_basedir" mac-setup; then
    echo -e "${RED}ERROR:${NC}"
    echo -e "${BOLD}Can not setup MP-SPDZ. Please check the logs above"
    exit 1
  fi
  echo -e "${BOLD}Done make mac-setup! .${NC}"

  echo -e "${GRN}\nInstalling protocol SHAMIR ${NC}"
  # TODO:
  if ! make -C "$mpspdz_basedir" shamir-party.x; then
    echo -e "${RED}ERROR:${NC}"
    echo -e "${BOLD}Can not build shamir-party.x protocol. Please check the logs above"
    exit 1
  fi
  echo -e "${BOLD}Done shamir! .${NC}"
}


# Get system information  ---------------------------------------------------------------------------------------
echo -e "\n${YLW}--------------------------------SYSTEM INFORMATION------------------------------------------${NC}"
if test $(uname) = "Linux"; then
  echo -e "${BOLD}Linux detected. MP-SPDZ will be used through binary distribution${NC}\n"
  configure_linux
elif test $(uname) = "Darwin"; then
  echo -e "${BOLD}macOS detected. MP-SPDZ will be compiled from source instead of using binary distribution${NC}\n"
  configure_darwin
else
  echo -e "${RED}ERROR${NC}: Unknown operating system. Only Linux or macOS based operating systems are supported\n"
  echo -e "Aborting installation \n"
  exit 1
fi
# ----------------------------------------------------------------------------------------------------------------


# To use it later
#! find "$basedir/MP-SPDZ/$(uname)-$cpu_arch/" -name '*.x'  -exec cp -prv '{}' "$basedir/MP-SPDZ/" ';'

# Link MPC files ----------------------------------------------------------------------------------------------
# This also includes linking test_setup
echo -e "\n${YLW}Linking MPC files... ${NC}"
if ! ln -nsf "$basedir"/MP-SPDZ/*.mpc "$mpspdz_basedir"/Programs/Source/; then
  echo -e "\n${RED}ERROR${NC}: Cannot not create link for MPC files into MP-SPDZ programs!\n"
  exit 1
fi
echo -e "${BOLD}Done! ${NC}"
# ----------------------------------------------------------------------------------------------------------------


##################################################################################################################
# Create temporary test environment
##################################################################################################################

# Creates temporary directories
mpspdz_tmpdir="/tmp/fedbiomed_configure_secagg_test_${RANDOM}_${RANDOM}"
echo -e "${YLW}\nCreating temporary testing directory $mpspdz_tmpdir ---------${NC}"
for d in "$mpspdz_tmpdir" "$mpspdz_tmpdir/Player-Data" ; do
  mkdir $d
  if [ $? -ne 0 ];  then
    echo -e "\n${RED}ERROR${NC}:"
    echo -e "${BOLD} Can not create directory $d. Please check the logs above. ${NC}"
    exit 1
  fi
done
echo -e "${BOLD}Done! ${NC}"

# Create test certificates, input files and ip address -----------------------------------------------------------
echo -e "\n${YLW}Creating temporary certificates and input files for testing${NC}"
player_data="$mpspdz_tmpdir/Player-Data"

# No more needed to remove test_ip_assigned or test input/ouput files (directory is newly created)

# Create data for two test party
for i in 0 1 2; do
  openssl req -newkey rsa -nodes -x509 -out "$player_data"/P"$i".pem -keyout "$player_data"/P"$i".key -subj /CN=P"$i"
  echo "1$i" > "$player_data/Test-Input-P$i-0"
  echo "localhost:1111$i" >> "$player_data/test_ip_assigned"
done

if ! c_rehash "$player_data"; then
    echo -e "\n${RED}ERROR${NC}:"
    echo -e "${BOLD} Can not execute 'c_rehash' to finish creation of certificates. Please check the logs above. ${NC}"
    exit 1
fi
echo -e "${BOLD}Done! ${NC}"

# Run configuration test-----------------------------------------------------------------------------------------------

# Compiles test setup mpc file
if ! "$basedir"/scripts/fedbiomed_mpc "$fedbiomed_env" "$mpspdz_tmpdir" compile --script test_setup; then
    echo -e "\n${RED}ERROR${NC}:"
    echo -e "${BOLD} Error while compiling 'test_setup' ${NC}"
    exit 1
fi

# Starts parties for MPC
for i in 0 1 2; do
  "$basedir"/scripts/fedbiomed_mpc "$fedbiomed_env" "$mpspdz_tmpdir" exec --protocol shamir-party $i \
      -ip Player-Data/test_ip_assigned \
      -IF Player-Data/Test-Input \
      -OF Player-Data/Test-Output \
      test_setup \
      -N 3  &
done

# Waits for calculation. There are 3 required output from 3 different party as "RESULT 33"
# when each output is received from parties test will pass. If this process takes more than 10 seconds
# test will fail.
count=0
maxcount=9
wait=(1 1 1)
while [ $(IFS=+; echo "$((${wait[*]}))") -gt 0 ]; do
  sleep 1;

  echo -e "${BOLD}Checking the output of parties for testing  round $count out of $maxcount ------------------------------${NC}"
  for i in 0 1 2; do
    if [ ! -f "$player_data/Test-Output-P$i-0" ]; then
      test_result=''
    else
      test_result=$(cat "$player_data"/Test-Output-P"$i"-0 2>&1)
    fi

    if [ -n "$test_result" -a "$test_result" != "" ]; then
        if [ "$test_result" == "RESULT 33" ]; then
          wait[$i]=0
        else
          # Expected output for each party is "RESULT 33" if any part has an output different than "RESULT 33"
          # installation test exits
          echo -e "\n${RED}ERROR${NC}: Calculation is wrong. Got result '$test_result' instead of 'RESULT 33'"
          exit 1
        fi
    fi

    echo "Checking output of party ->  $i : Result '$test_result' "
  done
  count=$((count+1))

  # More than maxcount seconds exit process with error
  if [[ "$count" -gt "$maxcount" ]]; then
    echo -e "\n${RED}ERROR${NC}: Could not verify MP-SPDZ installation expected outputs are not received. \n\
                \r Please check the logs above!\n"
    exit 1
  fi
done

echo -e "*Testings result received at round $(($count-1))"
echo -e "${BOLD}MP-SPDZ configuration is successfully tested! ${NC}"

# Try to remove temporary directory but dont fail
echo -e "${BOLD}Removing temporary test directory $mpspdz_tmpdir ${NC}"
rm -rf $mpspdz_tmpdir

# Testing Ends ################################################################################################

echo -e "\n${GRN} MP-SPDZ configuration is successful!\n${NC}
"

