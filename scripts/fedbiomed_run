#!/bin/bash
#
# run a specific component of fedbiomed
#

# detect how the file is run
([[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] ||
 [[ -n $KSH_VERSION && $(cd "$(dirname -- "$0")" &&
    printf '%s' "${PWD%/}/")$(basename -- "$0") != "${.sh.file}" ]] ||
 [[ -n $BASH_VERSION ]] && (return 0 2>/dev/null)) && sourced=1 || sourced=0

[[ "${sourced}" == "1" ]] && echo "This file MUST NOT be sourced" && return

#Activate conda with any of the next commands
#source ~/miniconda3/bin/activate
#source ~/.bashrc

eval "$(conda shell.bash hook)"

#
# find the directory containing all sources
#
#
basedir=$(cd $(dirname $0)/.. || exit ; pwd)
cd $basedir || exit


function usage_body() {

    case $1 in
        node)
            cat <<EOF

node      : a second argument is mandatory
            - start : launch a new node
            - add/list/delete deal with dataset
            - add-mnist PATH_TO_DATASET non-interactively adds a mnist dataset
            - add-dataset-from-file PATH_TO_JSON_FILE non-interactively adds a dataset
                described in a json file with the following format

                {
                    "path": "/path/to/dataset",
                    "data_type": "csv|default|images",
                    "description": "arbitrary description string",
                    "tags": "comma,separated,list,without,blanks",
                    "name": "arbitrary name string"
                }

            - delete-mnist non-interactively un-registers a mnist dataset
            - delete-all non interactively un-registers all node datasets

            - register-training-plan  | --register-training-plan  | -rtp    : Register and approve a training plan from a local file.
            - update-training-plan    | --update-training-plan    | -utp    : Update training plan file (for a training plan registered from a local file)
            - delete-training-plan    | --delete-training-plan    | -dml    : Delete a training plan from database (not for default training plans)

            - list-training-plans     | --list-training-plans     | -ltps   : List all training plans (requested, default or registered)
            - view-training-plan      | --view-training-plan      | -vtp    : View a training plan source code (requested, default or registered)
            - approve-training-plan   | --approve-training-plan   | -atp    : Approve a training plan (requested, default or registered)
            - reject-training-plan    | --reject-training-plan    | -rjtp   : Reject a training plan (requested, default or registered)

            Positional Arguments:

            - certificate   : Option for certificate management. Please see details 'fedbiomed_run node certificate -h'
            - configuration   : Option for configuration management. Please see details 'fedbiomed_run node configuration -h'

            Optional Arguments:

            an optional config file CONFIG_NAME can be given it will be used instead of the default one (config.ini)

            an optional IP_ADDRESS can be used to join the network component instead of
                the default localhost

            optional additional PARAMS are passed to fedbiomed

            Option that should be used with start or add command to manage node modes.

            - enable-training-plan-approval     | --enable-training-plan-approval   : to enable training plan approval mode
            - allow-default-training-plans      | --allow-default-training-plans    : to allow default training plan for training plan approval mode
            - disable-training-plan-approval    | --disable-training-plan-approval  : to disable training plan approval mode
            - disable-default-training-plans    | --disable-default-training-plans  : to disable default training plans for training plan approval mode
EOF
        ;;

        researcher)
            cat <<EOF

researcher: launch a researcher notebook

            Second argument mandatory:
            - start       : Starts Fed-BioMed researcher component by launch a Jupyter notebook with activated
                            conda environment.
            - certificate : Option for certificate management.
                            Please see details 'fedbiomed_run researcher certificate -h'
            - configuration : Option for configuration management.
                            Please see details 'fedbiomed_run researcher configuration -h'

            an optional IP_ADDRESS (eg 10.1.2.3 or host.foo) can be used to join the network
                component instead of the default localhost
EOF
        ;;

        network)
            cat <<EOF

network   : run the necessary docker containers (in development mode)
            stop the containers if stop argument is provided
EOF
        ;;

        gui)
            cat <<EOF

gui       :
            Options:
            - data-folder | --data-folder | -df  [<path>]       :   Folder that data files are stored, by default script will
                                                                    look for \`data\` in Fed-BioMed directory
            - config      | --config      | -c   [<config>]     :   Name of the node's config file. GUI will be configured
                                                                    based on given config file. By default, \`config_node.ini\`.
                                                                    If config file doesn't exist script will raise an error.
            - cert        | --cert        | -ct  [<certificate>]:   Name of the certificate to use in order to enable HTTPS.
                                                                    If cert file doesn't exist script will raise an error.
            - key         | --primary-key | -k   [<key>]        :   Name of the private key for the SSL certificate.
                                                                    If the key file doesn't exist, the script will raise an error.
            - port        | --port        | -p   [<port>]       :   HTTP port that GUI will be served. Default is \`8484\`
            - host        | --host        | -h   [<host>]       :   HTTP host that GUI will be served, Default is \`localhost\`
            - recreate    | --recreate    | -rc                 :   Flag that indicates, UI will be rebuilt while launching
                                                                    the GUI. Use this option if you have updated UI scripts.
            - debug       | --debug       | -dbg                :   Flag that will start Flask (Server) in debug mode.

            Commands:
            - start: Launches the Node GUI with given options.
EOF
        ;;

        other)
            cat <<EOF

certificate-dev-setup : prepares development environment by registering certificates of each component created
            in a single clone of Fed-BioMed. This is only for development purposes and it is required to
            fedbiomed-researcher conda environment installed for this option.
EOF
        ;;
    esac
}

function usage() {

    case $1 in
        node)
            cat <<EOF
usage: fedbiomed_run node [config CONFIG_NAME | ip_address IP_ADDRESS | enable-training-plan-approval | disable-training-plan-approval | allow-default-training-plans | disable-default-training-plans ]
                         (start | add | list | delete | add-mnist PATH_TO_DATASET | delete-mnist | list-training-plans | view-training-plan | register-training-plan | delete-training-plan | update-training-plan) PARAMS


Runs the fedbiomed node component after properly initializing the environments.

EOF
            usage_body node
        ;;

        researcher)
            cat <<EOF
usage: fedbiomed_run researcher [ip_address IP_ADDRESS]

Runs the fedbiomed researcher component.
EOF
            usage_body researcher
        ;;

        network)
            cat <<EOF
usage: fedbiomed_run network (stop)

Runs the fedbiomed network component.
EOF
            usage_body network
        ;;

        gui)
            cat <<EOF
usage: febiomed_run gui [data-folder DATAFOLDER | config CONFIG_NAME | cert CERTIFICATE_NAME | key PRIVATE_KEY_NAME | host IP_ADDRESS | port PORT | --recreate] (start)

Runs the fedbiomed gui
EOF
            usage_body gui
        ;;

        *|'')
            cat <<EOF
usage: fedbiomed_run network (stop)
       fedbiomed_run researcher [ip_address IP_ADDRESS] start
       fedbiomed_run node [config CONFIG_NAME | ip_address IP_ADDRESS | enable-training-plan-approval | disable-training-plan-approval | allow-default-training-plans | disable-default-training-plans ]
                         (start | add | list | delete | add-mnist PATH_TO_DATASET | delete-mnist | list-training-plans | view-training-plan | register-training-plan | delete-training-plan | update-training-plan) PARAMS
       febiomed_run gui [data-folder DATAFOLDER | config CONFIG_NAME | cert CERTIFICATE_NAME | key PRIVATE_KEY_NAME | host IP_ADDRESS | port PORT | --recreate]
                         (start)
       fedbiomed_run certificate-dev-setup

Runs the fedbiomed components after properly initializing the environments.
The component name is mandatory.
EOF
            usage_body network
            usage_body researcher
            usage_body node
            usage_body gui
            usage_body other
    ;;
    esac

    exit 0
}

# Colors
RED='\033[0;31m' #red
YLW='\033[1;33m' #yellow
NC='\033[0m' #no color

# Default GUI host and port variables
GUI_HOST="localhost"
GUI_PORT="8484"
GUI_DEBUG=False

# Error function
function error(){
      echo -e "${RED}ERROR: ${NC}"
      echo -e "${BOLD}$1${NC}"
      exit 1
}


# Function forward given command to python cli for specified component
function forward_command_to_python_cli(){

    COMPONENT=$1
    EXTRA_PARAMS=$2
    IP_ADDRESS=$3

    if [ -z "$EXTRA_PARAMS" ]; then
      error "Please provide a command. See fedbiomed_run $COMPONENT -h"
    fi

    source "$basedir"/scripts/fedbiomed_environment "$COMPONENT" "$IP_ADDRESS"

    # dont write error message in this case, cli already does it
    python -m fedbiomed."$COMPONENT".cli $EXTRA_PARAMS

}


# Script for starting GUI
function start_gui() {
    # Check config file status
    if [ -n "$CONFIG_FILE" ]; then
      echo -e "${YLW}INFO${NC}: Using $CONFIG_FILE file as GUI node config"
    else
      CONFIG_FILE="config_node.ini"
      echo -e "${YLW}INFO${NC}: Config file has not been provided, default config 'config_node.ini' will be used for GUI"
    fi
    if [ -z "${INSTALL_ONLY}" -a ! -f "etc/${CONFIG_FILE}" ] ; then
        echo "ERROR: 'etc/${CONFIG_FILE}' does not exist in Fed-BioMed root directory"
        exit 1
    fi

    # Configure data path
    if [ ! -n "$DATA_PATH" ]; then
      DATA_PATH="data"
      echo -e "${YLW}INFO${NC}: Data path has not been provided. Trying to use \${FEDBIOMED_DIR}/data dir"
      if [ -z "${INSTALL_ONLY}" -a ! -d "$basedir/$DATA_PATH" ]; then
        echo "ERROR: 'data' folder does not exist in  directory"
        exit 1
      fi
    else
        # If the path is absolute
        if [[ $DATA_PATH == /* ]]; then
            if [[ -z "${INSTALL_ONLY}"  && ! -d "$DATA_PATH" ]]; then
              echo -e "${RED}ERROR${NC}: folder '$DATA_PATH' does not exist. Can not continue.\n"
              exit 1
            fi
        # If the path is relative
        else
            if [ -z "${INSTALL_ONLY}"  -a ! -d "$basedir/$DATA_PATH" ]; then
              echo -e "${RED}ERROR${NC}: folder '$basedir/${DATA_PATH}' does not exist. Can not continue.\n"
              exit 1
            else
              DATA_PATH="$(cd "$basedir/$DATA_PATH" && pwd)"
            fi
            echo "$DATA_PATH"
        fi
    fi

    # Activate Fed-BioMed GUI environment
    source ${basedir}/scripts/fedbiomed_environment gui

    # Install node modules
    echo -e "${YLW}INFO${NC}: Controlling react bundle and modules"
    cd ./gui/ui

    # Create bundle if there is no build directory/node_modules or recreate is active
    if  [ ! -d "$basedir/gui/ui/node_modules" ] || [ ! -d "$basedir/var/gui-build" ] || [ -n "$RECREATE" ];then
        echo -e "${YLW}INFO${NC}: Installing node modules"
        yarn install || exit

        echo -e "${YLW}INFO${NC}: Building Fed-BioMed GUI"
        yarn run build || exit

        if [ -d "$basedir/var/gui-build" ];then
          rm -Rf "$basedir/var/gui-build";
        fi

        [ -e $basedir/var ] || mkdir $basedir/var # may not exist after cleaning
        mv "$basedir/gui/ui/build/" "$basedir/var/gui-build"
    fi

    if [ -z "$INSTALL_ONLY" ] ; then
        cd ../server
        # Starting flask
        echo -e "${YLW}INFO:${NC} Starting Flask Server and API services...."
        FEDBIOMED_DIR="$basedir" \
          NODE_CONFIG_FILE="$CONFIG_FILE" \
          BUILD_DIR="$basedir/var/gui-build" \
          DATA_PATH="$DATA_PATH" \
          HOST="$GUI_HOST" \
          PORT="$GUI_PORT" \
          DEBUG="$GUI_DEBUG" \
          CERTIFICATE_NAME="$CERTIFICATE_NAME" \
          PRIVATE_KEY_NAME="$PRIVATE_KEY_NAME" \
          FLASK_ENV="development" \
          python app.py
    fi
}

#
# argument decoding
#
case $1 in


    network)
        cd ./envs/development/docker
        #
        case $2 in
            stop)
                source ${basedir}/scripts/fedbiomed_environment network
                docker-compose down
                ;;
            help|-h|--help)
                usage network
                ;;
            *)
                source ${basedir}/scripts/fedbiomed_environment network
                CONTAINER_UID=$(id -u) CONTAINER_GID=$(id -g) \
                             CONTAINER_USER=$(id -un | sed 's/[^[:alnum:]]/_/g') \
                             CONTAINER_GROUP=$(id -gn | sed 's/[^[:alnum:]]/_/g') \
                             docker-compose build restful mqtt
                CONTAINER_UID=$(id -u) CONTAINER_GID=$(id -g) \
                             CONTAINER_USER=$(id -un | sed 's/[^[:alnum:]]/_/g') \
                             CONTAINER_GROUP=$(id -gn | sed 's/[^[:alnum:]]/_/g') \
                             docker-compose up -d restful mqtt
                ;;
        esac
        ;;
    gui)
        while true ; do
            case $2 in
              config|--config|-c)
                    if [ $# -lt 3 ] ; then
                        echo -e "${RED}ERROR${NC}: missing config file name"
                        exit 1
                    fi
                    CONFIG_FILE=$3
                    shift
                    shift
              ;;
              data-folder|--data-folder|-df)
                  if [ $# -lt 3 ] ; then
                      echo -e "${RED}ERROR${NC}: missing data folder path"
                      exit 1
                  fi
                  DATA_PATH="$3"
                  shift
                  shift
                  ;;
              cert|--certificate|-ct)
                  if [ $# -lt 3 ] ; then
                      echo -e "${RED}ERROR${NC}: missing certificate path"
                      exit 1
                  fi
                  CERTIFICATE_NAME="$3"
                  if [ -z "${INSTALL_ONLY}" -a ! -f "etc/${CERTIFICATE_NAME}" ] ; then
                    echo -e "${RED}ERROR${NC}: Certificate file 'etc/${CERTIFICATE_NAME}' does not exist in Fed-BioMed root directory"
                    exit 1
                  fi
                  echo -e "${YLW}INFO${NC}: Using 'etc/$CERTIFICATE_NAME' as GUI node SSL certificate"
                  shift
                  shift
                  ;;
              key|--primary-key|-k)
                  if [ $# -lt 3 ] ; then
                      echo -e "${RED}ERROR${NC}: missing primary key path"
                      exit 1
                  fi
                  PRIVATE_KEY_NAME="$3"
                  if [ -z "${INSTALL_ONLY}" -a ! -f "etc/${PRIVATE_KEY_NAME}" ] ; then
                    echo -e "${RED}ERROR${NC}: Private key file 'etc/${PRIVATE_KEY_NAME}' does not exist in Fed-BioMed root directory"
                    exit 1
                  fi
                  echo -e "${YLW}INFO${NC}: Using 'etc/$PRIVATE_KEY_NAME' as GUI node private key for SSL certificate"
                  shift
                  shift
                  ;;
              port|--port |-p)
                  GUI_PORT="$3"
                  shift
                  shift
                  ;;
              host|--host)
                  GUI_HOST="$3"
                  shift
                  shift
                  ;;
              recreate | --recreate | -rc )
                  RECREATE=True
                  shift
                  ;;
              install-only | --install-only | -io )
                  INSTALL_ONLY=True
                  shift
                  ;;
              debug|--debug|-dbg)
                  GUI_DEBUG=True
                  shift
                  ;;
              help|-h|--help)
                  usage gui
                  ;;
              *)
                  break
                  ;;
            esac
        done
        case $2 in
            start)
                start_gui
                ;;
            *)
              echo -e "${RED}ERROR:${NC}: Node GUI command should be used with start. Please make sure that your command is correct"
              exit 1
              ;;
        esac
      ;;


    node)
        while true ; do
            case $2 in
                # handle optional parameters : config file, network ip, training plan approval and allow default training plans
                config)
                    if [ $# -lt 3 ] ; then
                        echo "ERROR: missing config file name"
                        exit 1
                    fi
                    export CONFIG_FILE=$3
                    shift
                    shift
                ;;
                ip_address)
                    if [ $# -lt 3 ] ; then
                        echo "ERROR: missing network ip"
                        exit 1
                    fi
                    IP_ADDRESS=$3
                    shift
                    shift
                ;;
                enable-training-plan-approval|--enable-training-plan-approval|-tmp)
                    export ENABLE_TRAINING_PLAN_APPROVAL=True
                    shift
                ;;
                disable-training-plan-approval|--disable-training-plans-approval|-dtpa)
                    export ENABLE_TRAINING_PLAN_APPROVAL=False
                    shift
                ;;
                allow-default-training-plans|--allow-default-training-plans|-adtps )
                    export ALLOW_DEFAULT_TRAINING_PLANS=True
                    shift
                ;;
                disable-default-training-plans|--disable-default-training-plans|-ddtps )
                    export ALLOW_DEFAULT_TRAINING_PLANS=False
                    shift
                ;;

                help|-h|--help)
                    usage node
                    ;;
                *)

                    break
                ;;
            esac
        done

        # pass remaining params to launched script
        if [ $# -ge 2 ]
        then
            export PARAMS=${@:3:$#-2}
        else
            export PARAMS=
        fi

        # TODO : better test with python module loading attempt and try/except
#        source ${basedir}/scripts/fedbiomed_environment node "$IP_ADDRESS" -v

        # silently initialize environment before any command
        if ! forward_command_to_python_cli node "configuration create" "$IP_ADDRESS"  >/dev/null 2>&1; then
            echo -e "${RED}ERROR:${NC}"
            echo -e "${BOLD}Error related to configuration (config) file. Please check you have valid config file for node"
            exit 1
        fi

        # Get params starting from second
        EXTRA_PARAMS=${@:2}

        if [ -f "./fedbiomed/node/cli.py" ]
        then
            case $2 in

                list|--list|-l)
                    python -m fedbiomed.node.cli --list $PARAMS
                    ;;

                del|delete|--del|--delete|-d)
                    python -m fedbiomed.node.cli --delete $PARAMS
                    ;;

                del-all|delete-all|--del-all|--delete-all|-da)
                    python -m fedbiomed.node.cli --delete-all $PARAMS
                    ;;

                delete-mnist|--delete-mnist|-dm)
                    python -m fedbiomed.node.cli --delete-mnist $PARAMS
                    ;;

                add|--add|-a)
                    python -m fedbiomed.node.cli --add $PARAMS
                    ;;

                add-mnist|--add-mnist|-am)
                    python -m fedbiomed.node.cli --add-mnist $PARAMS
                    ;;

                add-dataset-from-file|--add-dataset-from-file|-adff)
                    python -m fedbiomed.node.cli -adff $PARAMS
                    ;;

                register-training-plan|--register-training-plan|-rtp)
                    python -m fedbiomed.node.cli --register-training-plan $PARAMS
                    ;;

                approve-training-plan|--approve-training-plan|-atp)
                    python -m fedbiomed.node.cli --approve-training-plan $PARAMS
                    ;;

                reject-training-plan|--reject-training-plan|-rjtp)
                    python -m fedbiomed.node.cli --reject-training-plan $PARAMS
                    ;;
                update-training-plan|--update-training-plan|-utp)
                    python -m fedbiomed.node.cli --update-training-plan $PARAMS
                    ;;

                list-training-plans|--list-training-plans|-ltps)
                    python -m fedbiomed.node.cli --list-training-plans $PARAMS
                    ;;

                delete-training-plan|--delete-training-plan|-dtp)
                    python -m fedbiomed.node.cli --delete-training-plan $PARAMS
                    ;;

                view-training-plan|--view-training-plan|-vtp)
                    python -m fedbiomed.node.cli --view-training-plan $PARAMS
                    ;;

                start|--start|-s)
                    #export MQTT_BROKER=localhost
                    #export MQTT_BROKER_PORT=1883
                    #export UPLOADS_URL='http://localhost:8844/upload/'
                    python -m fedbiomed.node.cli --start $PARAMS
                    ;;

                *)
                  forward_command_to_python_cli "node" "$EXTRA_PARAMS" "$IP_ADDRESS"

                ;;
            esac
        else
            echo "INFO: no fedbiomed.node.cli yet in this version, skipping command"
        fi
        ;;

    researcher)
        #export MQTT_BROKER=localhost
        #export MQTT_BROKER_PORT=1883
        #export UPLOADS_URL='http://localhost:8844/upload/'

        while true ; do
            case $2 in
                ip_address)
                    if [ $# -lt 3 ] ; then
                        echo "ERROR: missing network ip"
                        exit 1
                    fi
                    IP_ADDRESS=$3
                    shift
                    shift
                    ;;
                *)
                    break
                ;;
            esac
        done

        # pass remaining params to launched script
        if [ $# -ge 2 ]
        then
            export PARAMS=${@:3:$#-2}
        else
            export PARAMS=
        fi

        EXTRA_PARAMS=${@:2}

        # Execution -------------------------------------------------------------------------------------------------
        # Activate conda environment
        case $2 in
            start)
                source "$basedir"/scripts/fedbiomed_environment researcher $IP_ADDRESS
                cd notebooks
                # Windows WSL and others cannot handle using redirect file for securing notebook launch
                # https://jupyter-notebook.readthedocs.io/en/stable/config.html (section NotebookApp.use_redirect_file)
                NB_OPTS=
                if [ -n "$(uname -r | egrep -i 'microsoft|wsl')" ]
                # case if windows WSL is used
                then
                    NB_OPTS='--NotebookApp.use_redirect_file=false'
                fi

                if ! forward_command_to_python_cli researcher "configuration create" "$IP_ADDRESS"; then
                    echo -e "${RED}ERROR:${NC}"
                    echo -e "${BOLD}Error related to configuration (config) file. Please check you have valid config file for researcher"
                    exit 1
                fi

                jupyter notebook $NB_OPTS

            ;;
            help|-h|--help)
                usage researcher
            ;;
            *)
              forward_command_to_python_cli "researcher" "$EXTRA_PARAMS" "$IP_ADDRESS"
            ;;
        esac
        ;;

    help|-h|--help)
        case $2 in
            node) usage node;;
            researcher) usage researcher;;
            gui) usage gui;;
            network) usage network;;
            certificate-dev-setup)
                source "$basedir"/scripts/fedbiomed_environment node $IP_ADDRESS
                python -m fedbiomed.common.cli $2 '-h' $PARAMS
            ;;
            *) usage;;
        esac
        ;;

    *)
      PARAMS=${@}
      if [ -z "$1" ]; then
        echo "Please specify a command/option with fedbiomed_run. Please see fedbiomed_run --help"
        exit 1
      fi

      source "$basedir"/scripts/fedbiomed_environment researcher $IP_ADDRESS
      python -m fedbiomed.common.cli $PARAMS
      ;;
esac
