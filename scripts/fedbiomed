#!/usr/bin/env python

# This file is originally part of Fed-BioMed
# SPDX-License-Identifier: Apache-2.0

import argparse
import importlib

from fedbiomed.common.cli import CLIArgumentParser, CommonCLI


class ConfigurationParser(CLIArgumentParser):
    """Instantiates configuration parser"""

    def initialize(self):
        """Initializes argument parser for creating configuration file."""

        self._parser = self._subparser.add_parser(
            "configuration",
            help="The helper for generating or updating component configuration files, see `configuration -h`"
            " for more details",
        )

        self._parser.set_defaults(func=self.default)

        # Common parser to register common arguments for create and refresh
        common_parser = argparse.ArgumentParser(add_help=False)
        common_parser.add_argument(
            "-r",
            "--root",
            metavar="ROOT_PATH_FEDBIOMED",
            type=str,
            nargs="?",
            default=None,
            help="Root directory for configuration and Fed-BioMed setup",
        )

        # Add arguments
        common_parser.add_argument(
            "-n",
            "--name",
            metavar="CONFIGURATION_FILE_NAME",
            type=str,
            nargs="?",
            required=False,
            help="Name of configuration file",
        )

        common_parser.add_argument(
            "-c",
            "--component",
            metavar="COMPONENT_TYPE[ NODE|RESEARCHER ]",
            type=str,
            nargs="?",
            required=True,
            help="Component type NODE or RESEARCHER",
        )

        # Create sub parser under `configuration` command
        configuration_sub_parsers = self._parser.add_subparsers()

        create = configuration_sub_parsers.add_parser(
            "create",
            parents=[common_parser],
            help="Creates configuration file for the specified component if it does not exist. "
            "If the configuration file exists, leave it unchanged",
        )

        refresh = configuration_sub_parsers.add_parser(
            "refresh",
            parents=[common_parser],
            help="Refreshes the configuration file by overwriting parameters without changing component ID",
        )

        create.add_argument(
            "-uc",
            "--use-current",
            action="store_true",
            help="Creates configuration only if there isn't an existing one",
        )

        create.add_argument(
            "-f", "--force", action="store_true", help="Force configuration create"
        )

        create.set_defaults(func=self.create)
        refresh.set_defaults(func=self.refresh)

    def _create_config_instance(self, component, root, name):

        # TODO: this implementation is a temporary hack as it introduces a dependency of
        # fedbiomed.common to fedbiomed.node or fedbiomed.researcher
        # To be suppressed when redesigning the imports
        if component.lower() == "node":
            NodeConfig = importlib.import_module("fedbiomed.node.config").NodeConfig
            config = NodeConfig(root=root, name=name, auto_generate=False)
        elif component.lower() == "researcher":
            ResearcherConfig = importlib.import_module(
                "fedbiomed.researcher.config"
            ).ResearcherConfig
            config = ResearcherConfig(root=root, name=name, auto_generate=False)
        else:
            print(f"Undefined component type {component}")
            exit(101)

        return config

    def create(self, args):
        """CLI Handler for creating configuration file and assets for given component

        TODO: This method doesn't yet concentrate all actions for creating configuration file for
            given component. Since, `environ` will be imported through component CLI, configuration
            file will be automatically created. In future, it might be useful to generate configuration
            files.
        """

        config = self._create_config_instance(args.component, args.root, args.name)

        # Overwrite force configuration file
        if config.is_config_existing() and args.force:
            print("Overwriting existing configuration file")
            config.generate(force=True)

        # Use exisintg one (do nothing)
        elif config.is_config_existing() and not args.force:
            if not args.use_current:
                print(
                    f'Configuration file "{config.path}" is alreay existing for name "{config.name}". '
                    "Please use --force option to overwrite"
                )
                exit(101)
            # Generate wont do anything
            config.generate()
        else:
            print(f'Generation new configuration file "{config.name}"')
            config.generate()

    def refresh(self, args):
        """Refreshes configuration file"""

        config = self._create_config_instance(args.component, args.root, args.name)
        print(
            "Refreshing configuration file using current environment variables. This operation will overwrite"
            "existing configuration file without changing component id."
        )

        # Refresh
        config.refresh()
        print("Configuration has been updated!")


# class ConfigNameAction(argparse.Action):
#     """Action for the argument config"""
#     def __call__(self, parser, namespace, values, option_string=None):
#         print(f'Executing CLI for configraution {values}')
#         os.environ["CONFIG_FILE"] = values


cli = CommonCLI()
cli.initialize_optional()

# Initialize configuration parser
configuration_parser = ConfigurationParser(cli.subparsers)
configuration_parser.initialize()

# Add node and researcher options
node_p = cli.subparsers.add_parser(
    "node",
    add_help=False,
    help="Command for managing Node component")
researcher_p = cli.subparsers.add_parser(
    "researcher",
    add_help=False,
    help="Command for managing Researcher component")


def node(args):
    """Forwards node CLI"""
    NodeCLI = importlib.import_module('fedbiomed.node.cli').NodeCLI
    cli = NodeCLI()
    cli.parse_args(args)


def researcher(args):
    """Forwards researcher CLI"""
    ResearcherCLI = importlib.import_module('fedbiomed.researcher.cli').ResearcherCLI
    cli = ResearcherCLI()
    cli.parse_args(args)


node_p.set_defaults(func=node)
researcher_p.set_defaults(func=researcher)


if __name__ == "__main__":

    # This part executes know arguments
    args, extra = cli.parser.parse_known_args()
    # Forward arguments to Node or Researcher CLI
    if hasattr(args, "func") and args.func in [node, researcher]:
        args.func(extra)
    elif extra:
        cli.parse_args(['--help'])
    elif hasattr(args, "func"):
        args.func(args)
    # If there is no command provided
    else:
        cli.parse_args(['--help'])
