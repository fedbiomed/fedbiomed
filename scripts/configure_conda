#!/bin/bash
#
# create all necessary environments
#

# List of available environemnts for Fed-BioMed
fed_envs=(network node researcher gui)

# Environments that are required to be installed for Fed-BioMed components
# Note: network component is only necessary if restful module of network component  
# is to be started locally rather than docker.
fed_envs_auto_create=(node researcher gui)


# detect how the file is run
([[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] ||
 [[ -n $KSH_VERSION && $(cd "$(dirname -- "$0")" &&
    printf '%s' "${PWD%/}/")$(basename -- "$0") != "${.sh.file}" ]] ||
 [[ -n $BASH_VERSION ]] && (return 0 2>/dev/null)) && sourced=1 || sourced=0

[[ "${sourced}" == "1" ]] && echo "This file MUST NOT be sourced" && return

# activate conda
c=$(which conda)
if [ -z "$c" ]
then
    echo "Please install conda first !!!"
    exit 1
fi
eval "$(conda shell.bash hook)"

# ---------------
# ** functions **
# ---------------

usage() {
    #
    # print usage
    #
    echo "\
Usage: ${0##*/} [-n] [-c] [-t] [ENV ENV ..]

Install/update conda environments for fedbiomed. If several ENV
are provided, only these components will be updated. If no ENV is
provided, all components will be updated.

ENV can be network, node, researcher, gui (or a combination of them)

 -h, --help            this help
 -n, --dry-run         do nothing, just print what the script would do
 -c, --clean           remove environment before reinstallating it
 -t, --test            test the environment at the end of installation
                       (this only tests the researcher environment for now)
"
}

bad_usage () {
    echo "\
ERROR: $*
"
    usage
    exit 1
}

function clean_environment() {

    echo "=== Cleaning conda environment: $1"

    if [ $DRYRUN -eq 1 ]
    then
        echo conda remove --name $1 --all --yes
    else
        conda remove --name $1 --all --yes
    fi
}

function activate_environment() {
    #update conda environment after installing modules with
    # pip may result into inconsistencies

    base=$basedir/envs/development/conda/$1
    logfile=$1

    # check if alternate yaml file is available (OS dependent files usually)
    if [ -f "${base}-${ALTERNATE_YAML}.yaml" ]
    then
        file="${base}-${ALTERNATE_YAML}.yaml"
        logfile=${logfile}-${ALTERNATE_YAML}
    else
        file="${base}.yaml"
    fi

    echo "=== Installing/Updating conda environment from: ${file##*/}"

    if [ $DRYRUN -eq 1 ]
    then
        echo conda env update --file "$file"
    else
        conda env update --file "$file" 2>/tmp/${0##*/}_${logfile}.log
    fi

}

function test_environment() {
    #
    # simple check that environment is OK

    echo "=== Testing import of ML packages on researcher environment"

    if [ $DRYRUN -eq 1 ]
    then
        echo "python -c 'import torch; import torchvision; import sklearn; import monai; import tensorboard'"
        return 0
    fi

    conda activate fedbiomed-researcher
    echo "python -c 'import torch; import torchvision; import sklearn; import monai; import tensorboard'"
    check=$(python -c 'import torch; import torchvision; import sklearn; import monai; import tensorboard' 2>/dev/null )

    status=$?
    if [ $status -eq 0 ]
    then
        echo "=== Installation seems OK"
    else
        echo "=== Installation seems broken: unable to load some ML packages"
    fi
    conda deactivate
    return $status
}

#
# find the directory containing all sources
#
basedir=$(cd $(dirname $0)/.. || exit ; pwd)
cd $basedir || exit 1

# args parsing
DRYRUN=0
CLEAN=0
TEST=0
COMPONENTS=()

while (($# > 0)); do
    case $1 in
        -h|--help )
            usage
            exit 0
            ;;
        -c | --clean )
            CLEAN=1
            ;;
        -t | --test )
            TEST=1
            ;;
        -n | --dry-run)
            # do nothing
            DRYRUN=1
            ;;
        -* )
            bad_usage "unknown option: $1"
            ;;
        * )
            # we can update only some environments

            found=0
            for e in ${COMPONENTS[@]}
            do
                if [ $1 = $e ]
                then
                    found=1
                fi
            done

            if [ $found -eq 0 ]
            then
                COMPONENTS+=("$1")
            fi
            ;;
    esac
    shift
done

# some OS use different yaml files
case $(uname) in
    Darwin )
        ALTERNATE_YAML="macosx"
        ;;
    * )
        # general files are used
        ALTERNATE_YAML="NONE"
        ;;
esac

# verify COMPONENTS
if [ ${#COMPONENTS[@]} == 0 ]
then
    FINAL_COMPONENTS=("${fed_envs_auto_create[@]}")
else
    # verify that given components are allowed
    for c in ${COMPONENTS[@]}
    do
        found=0
        for e in ${fed_envs[@]}
        do
            if [ $c = $e ]
            then
                found=1
            fi
        done

        if [ $found -eq 0 ]
        then
            bad_usage "unknown component: $c (should be network/node/researcher)"
        fi
    done
    FINAL_COMPONENTS=("${COMPONENTS[@]}")
fi

echo "=== Components to consider: ${FINAL_COMPONENTS[@]}"

# start from fresh ?
if [ $CLEAN -eq 1 ]
then
    # clean all envs
    conda deactivate

    for i in ${FINAL_COMPONENTS[@]}
    do
        clean_environment fedbiomed-$i
    done
fi

# configure/update all conda environments
for i in ${FINAL_COMPONENTS[@]}
do
    activate_environment fedbiomed-$i
    conda deactivate
done

# check if environment is OK
if [ $TEST -eq 1 ]
then
    test_environment
    exit $?
fi

exit 0
