#!/usr/bin/env python

'''
This script spies the fedbiomed mqtt channels and report
messages on the console in a readable form more friendly
than a bare `mosquitto_sub -t '#' -v`

This allows to figure what going on an experiment.

This script could be launch on any host with access to
the mqtt server (localhost on dev env, vpn network on
prod env.
'''


from colorama import Fore, Style, init, deinit
from datetime import datetime

import getopt
import json
import paho.mqtt.client as mqtt
import sys
import time
import yaml


class MqttSpy:
    """
    simple mqtt monitor
    """


    def __init__(self,  mqtt_broker = 'localhost', mqtt_broker_port = 1883):
        """
        constructor

        parameters:
        mqtt_broker : mqtt server, default = localhost
        mqtt_broker_port: mqtt connexion port, default = 1883
        """


        self.client = mqtt.Client(client_id="MqttSpy")
        self.client.on_connect = self.on_connect
        self.client.on_message = self.on_message
        try:
            self.client.connect(mqtt_broker, mqtt_broker_port, keepalive=60)
        except:
            print("Cannot connect to:", mqtt_broker + "/" + str(mqtt_broker_port))
            sys.exit(-1)

        self.is_connected = False
        self.broker = mqtt_broker
        self.port   = mqtt_broker_port

        # list of channels to subscribe to
        # use of a hash instead of a proper list for convenience
        self.channels = {
            'general/server'   : None,
            'general/clients'  : None,
            'general/logger'   : None
        }


    def on_connect(self, client, userdata, flags, rc):
        """
        (re)connexion handler, passed to the mqtt library

        subscribes to the two main fedbiomed channels
        """


        print("========= MQTT : " + self.broker + "/" + str(self.port))

        self.is_connected = True

        for c in self.channels :
            print(Fore.CYAN + "** subscribing to: " + c + Style.RESET_ALL)
            self.client.subscribe(c)


    def on_message(self, client, userdata, message):
        """
        message handler

        displays the message content of monitored channels, with
        higlighted command/success fields.

        on the fly discovery of clients id and automatic subscription
        to the corresponding channels
        """


        print("========", datetime.now())
        print("topic  :", Fore.CYAN + message.topic + Style.RESET_ALL)

        # decode some output
        data = json.loads(message.payload)

        # colorize output
        k = "command"
        if k in data:
            print("command: " + Fore.GREEN + str(data[k]) + Style.RESET_ALL)
            del data[k]

        k = "success"
        if k in data:
            if data[k] is True:
                print("success: " + Fore.GREEN + str(data[k]) + Style.RESET_ALL)
            else:
                print("success: " + Fore.RED + str(data[k]) + Style.RESET_ALL)
            del data[k]

        print(yaml.dump(data, default_flow_style=False))

        # study message to detect new clients channels
        if "client_id" in data:
            c = 'general/' + data["client_id"]

            if not c in self.channels:
                self.channels[c] = None
                print(Fore.CYAN + "** subscribing to: " + c + Style.RESET_ALL)
                self.client.subscribe(c)



if __name__ == "__main__":

    """
    mqtt_sniffer main code

    arguments decoding and launch of the mqtt spy.
    """


    server = "localhost"
    port   = 1883
    usage  = """mqtt_sniffer [-h] [-s server ] [-p port]

monitor the fedbiomed mqtt server and display all messages.
Subscribes itself on the fly to all clients channels.
"""

    try:
        opts, args = getopt.getopt(sys.argv[1:],"hs:p:",["server=","port="])
    except getopt.GetoptError:
        print(usage)
        sys.exit(-1)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(usage)
            sys.exit()
        elif opt in ("-s", "--server"):
            server = arg
        elif opt in ("-p", "--port"):
            port = int(arg)

    # colorama
    init()

    spy = MqttSpy(mqtt_broker      = server,
                  mqtt_broker_port = port)

    spy.client.loop_forever()

    # colorama
    deinit()
