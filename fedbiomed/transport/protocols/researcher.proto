syntax = "proto3";


// import "google/protobuf/any.proto";
package researcher;

service ResearcherService {

    // Gettask streaming API
    rpc GetTask(stream TaskRequest) returns (stream TaskResponse) {};



    // Unary RPC long-lived polling
    rpc GetTaskUnary(TaskRequest) returns (stream TaskResponse) {};


    // RPC to send task replies
    rpc ReplyTask(stream TaskResult) returns (Empty) {}

    // Node logs
    rpc Feedback(FeedbackMessage) returns (Empty) {};
}

// Empty response
message Empty {}


message ProtocolVersion {
    string protocol_version = 101;
}

// Log message from node to researcher
message FeedbackMessage {

    string protocol_version = 1;
    optional string researcher_id = 2;
    // Tensorboard scalar values
    message Scalar {
        string node_id = 1;
        string experiment_id = 2;
        bool train = 3;
        bool test = 4;
        bool test_on_local_updates = 5;
        bool test_on_global_updates = 6;
        map<string, float> metric = 7;
        optional int32 epoch = 8; // optional -> None
        int32 total_samples = 9;
        int32 batch_samples = 10;
        int32 num_batches = 11;
        optional int32 num_samples_trained = 12; // optional -> None
        int32 iteration = 13;
        string node_name = 14;
    }

    // Log messages
    message Log {
            string node_id = 1;
            string level = 2;
            string msg = 3;
    }

    oneof feedback_type {
        Scalar scalar = 3;
        Log log = 4;
    }

}

// Task request
message TaskRequest {
    string node = 1;
    string protocol_version = 2;
}


// GRPC Message as string that is going to be
// sent from researcher to node or node to researcher
message TaskResponse {
    int32 size = 1;
    int32 iteration = 2;
    bytes bytes_ = 3;

}


// Reply stream from node to researcher
message TaskResult {
    int32 size = 1;
    int32 iteration = 2;
    bytes bytes_ = 3;
}
