# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

from fedbiomed.transport.protocols import (
    researcher_pb2 as fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2,
)

GRPC_GENERATED_VERSION = "1.73.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in fedbiomed/transport/protocols/researcher_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class ResearcherServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTask = channel.stream_stream(
            "/researcher.ResearcherService/GetTask",
            request_serializer=fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.TaskRequest.SerializeToString,
            response_deserializer=fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.TaskResponse.FromString,
            _registered_method=True,
        )
        self.GetTaskUnary = channel.unary_stream(
            "/researcher.ResearcherService/GetTaskUnary",
            request_serializer=fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.TaskRequest.SerializeToString,
            response_deserializer=fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.TaskResponse.FromString,
            _registered_method=True,
        )
        self.ReplyTask = channel.stream_unary(
            "/researcher.ResearcherService/ReplyTask",
            request_serializer=fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.TaskResult.SerializeToString,
            response_deserializer=fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.Empty.FromString,
            _registered_method=True,
        )
        self.Feedback = channel.unary_unary(
            "/researcher.ResearcherService/Feedback",
            request_serializer=fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.FeedbackMessage.SerializeToString,
            response_deserializer=fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.Empty.FromString,
            _registered_method=True,
        )


class ResearcherServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTask(self, request_iterator, context):
        """Gettask streaming API"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetTaskUnary(self, request, context):
        """Unary RPC long-lived polling"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ReplyTask(self, request_iterator, context):
        """RPC to send task replies"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Feedback(self, request, context):
        """Node logs"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ResearcherServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetTask": grpc.stream_stream_rpc_method_handler(
            servicer.GetTask,
            request_deserializer=fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.TaskRequest.FromString,
            response_serializer=fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.TaskResponse.SerializeToString,
        ),
        "GetTaskUnary": grpc.unary_stream_rpc_method_handler(
            servicer.GetTaskUnary,
            request_deserializer=fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.TaskRequest.FromString,
            response_serializer=fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.TaskResponse.SerializeToString,
        ),
        "ReplyTask": grpc.stream_unary_rpc_method_handler(
            servicer.ReplyTask,
            request_deserializer=fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.TaskResult.FromString,
            response_serializer=fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.Empty.SerializeToString,
        ),
        "Feedback": grpc.unary_unary_rpc_method_handler(
            servicer.Feedback,
            request_deserializer=fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.FeedbackMessage.FromString,
            response_serializer=fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.Empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "researcher.ResearcherService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "researcher.ResearcherService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class ResearcherService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTask(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/researcher.ResearcherService/GetTask",
            fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.TaskRequest.SerializeToString,
            fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.TaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetTaskUnary(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/researcher.ResearcherService/GetTaskUnary",
            fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.TaskRequest.SerializeToString,
            fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.TaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ReplyTask(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            "/researcher.ResearcherService/ReplyTask",
            fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.TaskResult.SerializeToString,
            fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Feedback(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/researcher.ResearcherService/Feedback",
            fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.FeedbackMessage.SerializeToString,
            fedbiomed_dot_transport_dot_protocols_dot_researcher__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
