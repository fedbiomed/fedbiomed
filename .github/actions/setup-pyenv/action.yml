---
name: 'Install Pyenv and Tox Permanently'
description: |
  Installs pyenv and the specified Python version permanently
  on self-hosted runners, and installs tox if not already installed.

inputs:
  python-version:
    description: 'Python version to install'
    required: true
    default: '3.10'

runs:
  using: 'composite'
  steps:
    # Set up Pyenv on Linux and macOS permanently
    - name: Install Pyenv (Linux/macOS)
      if: ${{ runner.os != 'Windows' }}
      shell: bash -l {0}
      run: |

        whoami

        # Function to install required packages for Linux
        install_linux_packages() {
          echo "Installing required packages for Ubuntu/Debian..."
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libssl-dev \
            zlib1g-dev \
            libbz2-dev \
            libreadline-dev \
            libsqlite3-dev \
            wget \
            curl \
            llvm \
            libffi-dev \
            liblzma-dev \
            python-openssl \
            python3-tk
        }

        # Function to install required packages for Fedora
        install_fedora_packages() {
          echo "Installing required packages for Fedora..."
          sudo dnf install -y \
            gcc \
            gcc-c++ \
            make \
            openssl-devel \
            bzip2-devel \
            libffi-devel \
            zlib-devel \
            readline-devel \
            sqlite-devel \
            curl \
            llvm \
            xz-devel \
            tk-devel \
            python3-tkinter \
            python3.10-tkinter \
            python3.11-tkinter \
            python3.12-tkinter
        }
        # Function to install required packages for macOS
        install_macos_packages() {
          echo "Installing required packages for macOS..."
          if ! command -v brew &> /dev/null; then
            echo "Homebrew not found. Installing Homebrew..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          fi

          brew install \
            openssl \
            readline \
            sqlite3 \
            xz \
            zlib
        }

        # Check the operating system and install packages accordingly
        if [[ "$RUNNER_OS" == "Linux" ]]; then
           if command -v apt-get &> /dev/null; then
            install_linux_packages  # For Ubuntu/Debian
          elif command -v dnf &> /dev/null; then
            install_fedora_packages  # For Fedora
          else
            echo "Unsupported Linux distribution."
            exit 1
          fi
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
            install_macos_packages
        else
          echo "Unsupported operating system: $RUNNER_OS"
          exit 1
        fi

        # Check if pyenv is already installed
        if command -v pyenv &> /dev/null; then
          echo "Pyenv is already installed."
        elif [ -f $HOME/.pyenv/bin/pyenv ]; then
          echo "Pyenv is already installed."
        else
          echo "Installing Pyenv..."
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"

          # Install pyenv
          curl https://pyenv.run | bash

          echo "PYENV_ROOT=$HOME/.pyenv" >> ~/.bashrc
          echo "PATH=$HOME/.pyenv/bin:$HOME/.pyenv/shims:$PATH" >> ~/.bashrc
          echo 'eval "$(pyenv init --path)"' >> ~/.bashrc
          echo 'eval "$(pyenv init -)"' >> ~/.bashrc
          source ~/.bashrc
        fi

        if ! grep -Fxq 'eval "$(pyenv init --path)"' ~/.bashrc; then
          echo "PYENV_ROOT=$HOME/.pyenv" >> ~/.bashrc
          echo "PATH=$HOME/.pyenv/bin:$HOME/.pyenv/shims:$PATH" >> ~/.bashrc
          echo 'eval "$(pyenv init --path)"' >> ~/.bashrc
          echo 'eval "$(pyenv init -)"' >> ~/.bashrc
          source ~/.bashrc
        fi

        # Install the specified Python version
        pyenv install -s ${{ inputs.python-version }}
        pyenv global ${{ inputs.python-version }}

        # Install tox if not already installed
        if ! command -v tox &> /dev/null; then
          echo "Installing tox..."
          python -m pip install --upgrade pip tox
        else
          echo "Tox is already installed."
        fi

        python --version

    - name: Validate Python installation
      shell: bash -l {0}
      run: |
        pyenv global 3.10
        python --version
