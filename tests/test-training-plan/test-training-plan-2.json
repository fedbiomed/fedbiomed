{
  "clsname": "MyTorchTrainingPlan",
  "source": "import json\nfrom unittest import mock\nimport torch\nfrom torch import nn\nfrom torch.nn import functional as F\nfrom fedbiomed.common.data import DataManager\nfrom fedbiomed.common.training_plans import TorchTrainingPlan\nclass MyTorchTrainingPlan(TorchTrainingPlan):\n\t'Custom torch training plan, implemented for testing purposes.\\n\\n    This TorchTrainingPlan:\\n    * overrides model-creation behaviour, to lighten dump files\\n    * implements a fake training_data method (returning a mock object)\\n    '\n\tclass MyTorchModule(nn.Module):\n\t\t'Custom torch neural network.'\n\t\tdef __init__(self)->None:super().__init__();self.conv1=nn.Conv2d(1,32,3,1);self.conv2=nn.Conv2d(32,64,3,1);self.dropout1=nn.Dropout(0.25);self.dropout2=nn.Dropout(0.5);self.fc1=nn.Linear(9216,128);self.fc2=nn.Linear(128,10)\n\t\tdef forward(self,x:torch.Tensor)->torch.Tensor:x=self.conv1(x);x=F.relu(x);x=self.conv2(x);x=F.relu(x);x=F.max_pool2d(x,2);x=self.dropout1(x);x=torch.flatten(x,1);x=self.fc1(x);x=F.relu(x);x=self.dropout2(x);x=self.fc2(x);return F.log_softmax(x,dim=1)\n\tdef __init__(self,model=None,optim=None)->None:'Instantiate the training plan, forcing the model choice.';super().__init__(model=self.MyTorchModule(),optim=optim or{'lrate':0.001},loss=torch.nn.CrossEntropyLoss());self.add_dependency(['import json','from unittest import mock','import torch','from torch import nn','from torch.nn import functional as F','from fedbiomed.common.data import DataManager','from fedbiomed.common.training_plans import TorchTrainingPlan'])\n\tdef save_to_json(self,path)->None:\n\t\tsuper().save_to_json(path)\n\t\twith open(path,'r',encoding='utf-8')as file:dump=json.load(file)\n\t\tdump['model']=None\n\t\twith open(path,'w',encoding='utf-8')as file:json.dump(dump,file)\n\tdef training_data(self,dataset_path:str)->DataManager:'Return a mock DataManager.';manager=mock.create_autospec(DataManager)(dataset=mock.MagicMock(),target=mock.MagicMock());return manager",
  "dependencies": ["import json", "from unittest import mock", "import torch", "from torch import nn", "from torch.nn import functional as F", "from fedbiomed.common.data import DataManager", "from fedbiomed.common.training_plans import TorchTrainingPlan"],
  "model": null,
  "optim": {"lrate": 0.001, "w_decay": 0.0,
  "modules": []}
}
